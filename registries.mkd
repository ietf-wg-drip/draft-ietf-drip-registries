---
coding: utf-8

title: DRIP Entity Tag (DET) Identity Management Architecture
abbrev: DETIM Architecture
docname: draft-ietf-drip-registries-15
category: std

ipr: trust200902
area: Internet
wg: drip Working Group
kw: Internet-Draft
cat: std

stand_alone: yes
pi: [toc, sortrefs, symrefs, comments]

author:
-   role: editor
    ins: A. Wiethuechter
    name: Adam Wiethuechter
    org: AX Enterprize, LLC
    street: 4947 Commercial Drive
    city: Yorkville
    region: NY
    code: 13495
    country: USA
    email: adam.wiethuechter@axenterprize.com
-   ins: J. Reid
    name: Jim Reid
    org: RTFM llp
    street: St Andrews House
    city: 382 Hillington Road, Glasgow Scotland
    code: G51 4BL
    country: UK
    email: jim@rfc1035.com

normative:
    RFC8610: # CDDL
    RFC9153: # drip-requirements
    RFC9374: # drip-det
    RFC9434: # drip-arch

informative:
    drip-auth: I-D.ietf-drip-auth
    drip-secure-nrid-c2: I-D.moskowitz-drip-secure-nrid-c2
    dane-clients: I-D.ietf-dance-client-auth
    drip-dki: I-D.moskowitz-drip-dki
    cbor-cert: I-D.ietf-cose-cbor-encoded-cert

    RFC1886: # ipv6 lookup
    RFC5280:
    RFC5730: # epp
    RFC6698: # dane/tlsa
    RFC6841: # dnssec policy
    RFC7480: # rdap-http-use
    RFC8126: # iana-guidelines
    RFC9082: # rdap-query-format
    RFC9083: # rdap-json-responses

    CTA2063A:
        title: ANSI/CTA 2063-A Small Unmanned Aerial Systems Numbers
        author:
        org: "Consumer Technology Association (CTA)"
        target: https://shop.cta.tech/products/small-unmanned-aerial-systems-serial-numbers
        date: 2019-09
    FAA-RID-NPRM:
        title: "Notice of Proposed Rule Making on Remote Identification of Unmanned Aircraft Systems"
        author:
        org: "United States Federal Aviation Administration (FAA)"
        date: 2019-12

--- abstract

This document describes the high level architecture for the registration and discovery of DRIP Entity Tags (DETs) using DNS. Discovery of DETs and their artifacts is performed via DRIP specific DNS structures and standard DNS methods. A general overview of the interfaces required between involved components is described in this document with future supporting documents giving technical specifications.

--- middle

# Introduction

Registries are fundamental to Unmanned Aircraft System (UAS) Remote ID (RID). Only very limited operational information can be sent via Broadcast RID, but extended information is sometimes needed. The most essential element of information is the UAS ID, the unique key for lookup of extended information in relevant registries (see Figure 4 of {{RFC9434}}).

Such extended information is retrieved from the UAS ID via the use of a DRIP Entity Tag (DET) {{RFC9374}} which is managed by the DRIP Identity Management Entity (DIME). In this document we assume the DIME belongs to the UAS Service Suppliers (USS) (Appendix A.2 of {{RFC9434}}) but a DIME can be independent or handled by another entity as well.

While most data to be sent via Broadcast RID (Section 1.2.1 of {{RFC9434}}) or Network RID (Section 1.2.2 of {{RFC9434}}) is public, much of the extended information will be private. As discussed in Section 7 of {{RFC9434}}, Authentication, Attestation, Authorization, Access Control, Accounting, Attribution, and Audit (typically known as AAA) is essential, not just to ensure that access is granted only to strongly authenticated, duly authorized parties, but also to support subsequent attribution of any leaks, audit of who accessed information when and for what purpose. As specific AAA requirements will vary by jurisdictional regulation, provider choices, customer demand, etc., they are left to specification in policies which are out of scope for this document.

The intent of the access control requirements is to ensure that no member of the public would be hindered from accessing public information, while only duly authorized parties would be enabled to access private information.

Registration is necessary to guarantee the uniqueness of the DET and thus to ensure the extended information is bound to the UAS ID.

This document creates the DRIP registration and discovery architecture focusing on the DET for UAS at its surrounding ecosystem. Clients in the architecture that can use a DET include Unmanned Aircraft (UA), Registered Assigning Authority (RAA), Hierarchical HIT Domain Authority (HDA), Ground Control Station (GCS), and USS.

This document uses the Concise Data Definition Language (CDDL) {{RFC8610}} for describing the registration data.

# General Concept {#intro-concept}

DETs when generated are only "proposed" and MUST be registered within the hierarchy to become legitimate. DIME's are the points in the hierarchy that enforce requirements on registration and information access. This document standardizes the basic interactions and methods for registration and lookup to support interoperability based around DETs. Other identifiers and their methods are out of scope for this document.

This document selects the Domain Name System (DNS) as the Public Information Registry for both storing and retrieving public information, such as the public key of DETs and pointers to Private Information Registries. Personally Identifiable Information (PII) is stored in Private Information Registries and MUST be protected through AAA.

For UAS, a DIME can provide the following congruent registration and lookup services:

1. personal information (e.g. for pilots and operators)
2. UAS Serial Number and aircraft physical characteristics
3. DETs as a Key ID for UAS RID Authentication ({{drip-auth}})
4. DETs as a pseudo-anonymous UAS Specific Session ID (UAS ID Type 4)
5. binding of UAS ID to UTM Operational Intent

A DIME's services are determined by their intended role ({{dime-roles}}) and policies (both internally and from cognizant authorities). For example, services 1 and 2 can be restricted to non-public access controlled lookups with mandatory registration and 5 to publicly available but access controlled lookups.

For this document only services 3 and 4, as they directly relate to DETs, are detailed. Services 1 and 5 will be talked about conceptually while service 2 is out of scope.

Requirements on the elements of information in registration and lookup (beyond the scope basic interoperability) is out of scope for this document. It is left to cognizant authorities to determine these details along with policy for access. For the UAS use-case this is Civil Aviation Authorities (CAAs).

# Terminology {#terminology}

## Required Terminology

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP 14 {{!RFC2119}} {{!RFC8174}} when, and only when, they appear in all capitals, as shown here.

## Additional Definitions

This document makes use of the terms (PII, USS, etc.) defined in {{RFC9153}}. Other terms (DIME, Endorsement, etc.) are from {{RFC9434}}, while others (RAA, HDA, etc.) are from {{RFC9374}}.

## Text Conventions

When talking about a DIME in documents it should be referred to as the role it is serving. For example a CAA level DIME running services both as an RAA (its primary role in the hierarchy) and as an HDA (optionally) would be be referred to "RAA" when performing its RAA duties and "HDA" when performing its HDA duties. The rest of the document will follow this convention unless verbosity or clarity is needed.

# DIME Roles {#dime-roles}

{{RFC9434}} defines the DRIP Identity Management Entity (DIME) as an entity that vets Claims and/or Evidence from a registrant and delivers, to successful registrations, Endorsements and/or Certificates in response. The DIME encompasses various logical components and can be classified to serve a number of different roles, which are detailed in the following subsections. The general hierarchy of these initial roles (some highly specialized and predetermined for the UAS use case) are illustrated in {{reg-class-fig}}.

{:fig: artwork-align="center"}
~~~~
                +----------+
                |   Apex   o
                +-o------o-+
                  |      |
******************|******|*****************************
                  |      |
            +-----o-+  +-o-----+
RAAs        |  RAA  |  |  INN  |
            +---o---+  +-------+
                |
****************|**************************************
                |
            +---o---+
HDAs        |  HDA  |
            +-------+
~~~~
{:fig #reg-class-fig title="DIME Roles and Hierarchy"}

## Apex

The Apex is a special DIME role that holds the values of RAA=0-3 and HDA=0. It serves as the branch point from the larger DNS system in which DETs are defined. The Apex is the owner of the IPv6 prefix portion of the DET associated with it (`2001:30/28`) which is assigned by IANA from the special IPv6 address space for ORCHIDs.

The Apex manages all delegations and allocations of RAAs to various parties. Allocations of RAAs SHOULD be done in contiguous groups of 4. This is to support the nibble reversing of the DET to be placed in DNS ({{det-dns}}).

| RAA Decimal Range | RAA Hex Range | Status |
|------------------ | ------------- | ------ |
| 0 - 3             | 0x0000 - 0x0003 | Apex |
| 4 - 3999          | 0x0004 - 0x0F9F | ISO 3166-1 Countries ({{iso3166}}) |
| 4000 - 16375      | 0x1000 - 0x3FFF | Reserved |
| 16376 - 16383     | 0x3FF8 - 0x3FFF | DRIP WG Experimental Use |

<!-- | 4000 - 4095       | 0x0FA0 - 0x0FFF | Manufacturer Code Authorities ({{irm}}) | -->

> Note: that the first column of this table is *decimal* values **not** *hexadecimal*.

RAA values of 0 (0x0000) to 3 (0x0003) are reserved to the Apex exclusively.

The Experimental range of 16376 (0x3FF8) to 16383 (0x3FFF), eight (8) RAAs, is allocated to the DRIP working group itself. RAA 16376 is already "in use" with `driptesting.org`. The rest of the range (16377 to 16383) are reserved to be allocated by the DRIP experts to agencies that wish to test.

While the individual Apexes can be designated for different purposes they share the same pool of RAAs to be allocated. Such operation would require policy by the administrator of the Apex group to avoid simultaneous allocation and is out of scope for this document.

## Registered Assigning Authority (RAA) {#raa}

An RAA is a business or organization that runs a DIME to register HDAs ({{hda}}). Most are contemplated to be CAAs (using {{iso3166}}), such as the Federal Aviation Authority (FAA), that then delegate HDAs to manage their National Air Space (NAS). This is does not preclude other entities to operate an RAA if the Apex allows it.

An RAA:

- MUST provide a set of services to allocate HDAs to organizations
- MUST have a public policy on what is necessary to obtain an HDA
- SHOULD maintain a DNS zone minimally for discovering HIP RVS servers
  
All RAA's have a single reserved HDA value: 0 (0x0000) for itself to support various functions or services. Other HDA values can be allocated or reserved per RAA policy.

### ISO 3166-1 Numeric Nations (INN) {#iso3166}

The RAA range of 4 (0x0004) to 3999 (0x0F9F) are reserved for CAAs using the ISO 3166-1 Numeric Nation Code. The RAA can be derived from the ISO 3166-1 numeric code by multiplying the value by 4 (i.e. `raa_code = iso_code * 4`). Four contiguous values (`raa_code + 0`, `raa_code + 1`, `raa_code + 2` and `raa_code + 3`) are used in a single allocation. The inverse (RAA to ISO) works out as: `iso_code = floor(raa_code / 4)`.

As an example the United States has an ISO 3166-1 Numeric Code of 840. This derives the following RAAs: 3360, 3361, 3362 and 3363.

It should be noted that the range of codes from 900 to 999 are defined (by ISO 3166-1) as "user assigned code elements" and do not have specific claimants predefined in the RAA space. Withdrawn and other special codes also do not have predetermined claimants.

How a CAA handles their allocated values are out of scope of this document. Control of these values are expected to be claimed by their respective owner. How a claim is vetted and validated is out of scope of this document. Protection against fraudulent claims of one of these values is out of scope for this document.

> Informational Note: A single entity may control more than one NAS (for example LU and BE being covered by Skeyes.be) and would manage two allocation spaces. How this is claimed and handled is out of scope for this document.

## Hierarchial HIT Domain Authority (HDA) {#hda}

An HDA may be an USS, ISP, or any third party that takes on the business to register client entities that need DETs. This includes, but is not limited to UA, GCS, UAS Operators and UAS/UTM infrastructure (such as Supplemental Data Service Providers). It SHOULD also provide needed UAS services including those required for HIP-enabled devices (e.g. RVS).

For UAS RID, HDAs can provide any of the following services:

- registration and public lookup of DETs as a Key ID for Authentication as defined in {{drip-auth}}
- registration and access controlled lookup of DETs as a pseudo-anonymous UAS Session ID
- registration of UAS ID and UTM Operational Intent to bind them together (if allowed by cognizant authority)

An HDA SHOULD maintain a set of RVS servers for UAS clients that may use HIP.  How this is done and scales to the potentially millions of customers are outside the scope of this document. This service MUST be discoverable through the DNS zone maintained by the HDA's RAA.

An RAA may assign a block of values to an individual organization. This is completely up to the individual RAA's published policy for delegation. Such policy is out of scope for this document.

# DIME Architecture {#dime-arch}

The DIME, in any of its roles ({{dime-roles}}), is comprised of a number of logical components that are depicted in {{dime-arch-fig}}. Any of these components could be delegated to other entities as a service both co-located or remote.

Interfaces with a specific transport requirement (such as HTTPS) are labeled accordingly. Interfaces not labeled can be implementation specific or proprietary due to co-location of components. For example the interface between the DPA and Registry/Name Server, when delegated, might be Extensional Provisioning Protocol (EPP) {{RFC5730}} (due to Registry/Name Server requirements) while implementations co-locating these components might use an internal code library. These non-labeled interfaces are out of scope for this document.

~~~~
+--------------------+
| Registering Client |
+---------o----------+
          |
          | HTTPS
          |
**********|*********************************************************
*         |       DRIP Identity Management Entity (DIME)           *
*         |                                                        *
*  +------o-------+         +-------------+      +--------------+  *
*  | DRIP         |         |             |      |              |  *
*  | Provisioning o---------o             |      |              |  *
*  | Agent (DPA)  |         |             |      |              |  *
*  +-------o------+         |             |      |              |  *
*          |                |             |      |              |  *
*          |                | DRIP        |      | Registration |  *
*          |                | Information o------o Data         |  *
*          |                | Agent (DIA) |      | Directory    |  *
*          |                |             |      | Service      |  *
*  +-------o----------+     |             |      | (RDDS)       |  *
*  |     Registry     |     |             |      |              |  *
*  |        /         |     |             |      |              |  *
*  | Name Server (NS) |     |             |      |              |  *
*  +------o-----------+     +-----o-------+      +--------------+  *
*         |                       |                                * 
*         |                       |                                *
**********|***********************|*********************************
          |                       |
          | TCP/UDP               | RDAP
          |                       |
          |               +-------o-------+
          '---------------o Lookup Client |
                          +---------------+
~~~~
{:fig #dime-arch-fig title="DIME Logical Components"}

## DRIP Provisioning Agent (DPA) {#dpa}

The DPA performs the important task of vetting information coming from clients wishing to register and then delegates (internally or externally) various items to other components in the DIME. This is the primary component that handles all DRIP related cryptographic operations for incoming registrations to the DIME.

The DPA:

- MUST have a publicly accessible and discoverable HTTPS interface for clients to register through
- MUST use a provided interface from a DRIP Information Agent ({{dia}})
- MUST use a provided interface from a Registry/Name Server ({{nameserver}})

Specific details of the public HTTPS interface (such as advertisement) is out of scope for this document.

## Registry & Name Server (NS) {#nameserver}

The Registry & Name Server component handles all the required DNS based requirements of the DIME to function. This includes the registration and maintenance of various DNS Resource Records used in public lookups.

The Registry:

- MUST provide an interface (for example EPP) for management of DNS functions
- MUST provide a standard DNS query interface

The detailed specification of either interface is out of scope for this document.

The Registry is the component that interfaces the DIME into the DNS hierarchy and thus operation SHOULD follow best common practices, specifically in security (such as running DNSSEC) as appropriate. Specific instruction for operating a Registry & Name Server is out of scope for this document. However the following references are presented as pointers to material that might be useful: TODO: add list of useful RFCs?

> Author Note: This may be very important here as we should not preclude a USS from running his own Name Server but they are not DNS experts and will need guidance or at least pointers to it to not mess it up. Such as SOA and NS formats to allow delegation if acting as an RAA.

## DRIP Information Agent (DIA) & Registration Data Directory Service (RDDS) {#dia}

The DIA is the main component handling information ingress (via registration) and egress (via lookup) of the RDDS.

The DIA:

- MUST have an access controlled interface for add/delete/update of information that MAY be publicly available
  - this interface definition is out of scope for this document
- MUST have an access controlled interface to query for information that MAY be publicly available
  - if this interface is publicly available it MUST use Registration Data Access Protocol (RDAP) ({{RFC7480}}, {{RFC9082}} and {{RFC9083}})
  - if this interface is not publicly available its specification is out of scope for this document

Certain information stored within the RDDS, due to policy, may be considered PII and MUST be protected from access using AAA (for example using XACML). See {{dap}} for more information.

The interface between a DIA and an RDDS is out of scope for this document.

# Registration Process

The general process for a registering party is as follows:

1. Verify inputs (such as Endorsement(s)) from registering party
2. Check for collision of DET and HI
3. Populate Registry/Name Server with resource record(s)
4. Populate RDDS via DIA with PII and other info
5. Generate and return Endorsement(s)

In the following subsections an abbreviated form of {{dime-arch}} seen below in {{process-example}} uses co-located components to describe the flow of information. Each section gives specific example details for the components, interfaces and data elements. Each section has an associated appendix ({{dns-examples}}) containing DNS examples.

~~~~
    +----------+
    |  Client  |
    +--o---o---+
       |   ^
   (a) |   | (b)
       |   |
*******|***|*****************************
*      |   |      DIME                  *
*      |   |                            *
*      v   |             +----------+   *
*   +--o---o--+          |          |   *
*   |   DPA   o--------->o          |   *
*   +----o----+   (d)    |          |   *
*        |               |          |   *
*        | (c)           | DIA/RDDS |   *
*        v               |          |   *
*   +----o--------+      |          |   *
*   | Registry/NS |      |          |   *
*   +-------------+      |          |   *
*                        +----------+   *
*                                       *
*****************************************
~~~~
{:fig #process-example title="Example Registration Architecture"}

## DET Registration Data Model {#det-reg-model}

The following is the general data model for DET registration data to be sent to the DPA from a client. This model is defined for and used by {{det-auth-reg}}, {{det-id-reg}} and {{det-id-auth-reg}}.

~~~~
det_registration_info = {
    serial_number: tstr .size 20,  ; ANSI CTA2063-A UAS Serial Number
    uas_id: bstr .size 20,  ; UAS ID per ASTM F3411-22a Basic ID Message
    uas_id_type: 0..15,  ; UAS ID Type per ASTM F3411-22a
    ? key_id: bstr,
    ? self_endorsement: bstr .size 120,
    ? utm_binding,
    * tstr => any
}
utm_binding = (
    utm_id: bstr .size 16,  ; Operational Intent (UUIDv4)
    utm_source: tstr  ; URI to USS with Operational Intent
)
~~~~

UAS ID Type (`uas_id_type`) and UAS ID (`uas_id`):

: defined per ASTM {{F3411}}. See {{uas-id-handling}} for handling specific instructions during registration.

UAS Serial Number (`serial_number`):

: defined per {{CTA2063A}}. Other UAS Serial Number formats (considered legacy) are out of scope for this document.

UTM Assigned ID (`utm_id`):

: also known as an Operational Intent, defined per ADD-UTM-REF and ASTM {{F3411}} as a UUIDv4.

Self Endorsement (`self_endorsement`):

: defined per {{endorsements}} and {{se}}. See {{se-handling}} for handling specific instructions during registration.

It is RECOMMENDED that the information above is signed over in some way to ensure integrity of the registration data. A recommended way to do this is with a JWT ({{RFC7519}}) or CWT ({{RFC8392}}) using the clients key.

### UAS ID Handling {#uas-id-handling}

The `uas_id_type` field MUST be set to same UAS ID Type in the ASTM {{F3411}} Basic ID Message to ensure proper decoding of the `uas_id` field.

The `uas_id` field MUST be set with the octets found in the ASTM {{F3411}} Basic ID Message UAS ID field. By using identical contents of the Basic ID Message the Specific Session ID Type octet (the first octet in the UAS ID when using UAS ID Type is `0x4`) is preserved. When a DET is used a Session ID, the value of this first octet MUST be `0x01`.

### Self Endorsement {#se-handling}

The `self_endorsement` is included when a DET is used either as a Session ID (in `uas_id`) or for Authentication (in `key_id`).

The value is verified by the DPA and its contents used to generate a Broadcast Endorsement for use in {{drip-auth}} and put into DNS.

### Service Tuple

Five critical pieces of information are required to provide the services listed in {{intro-concept}} that make a tuple. These are: UAS ID, UAS ID Type, UAS Serial Number, Key ID and UTM Assigned ID. The UAS ID, UAS ID Type and UAS Serial Number fields are mandatory and MUST NOT be null for entry as defined .

This tuple encodes the services that the specific registration is being used. A few examples can be seen in the table below.

| Service                         | UAS ID            | UAS ID Type | UAS Serial Number | Key ID | UTM Assigned ID |
| ------------------------------- | ----------------- | ----------- | ----------------- | ------ | --------------- |
| DET Authentication              | TEST3ABC          | 0x1         | TEST3ABC          | DET    | -               |
| DET Session ID                  | 0x1 + DET         | 0x4         | TEST3ABC          | -      | -               |
| DET Session ID + Authentication | 0x1 + DET         | 0x4         | TEST3ABC          | DET    | -               |

As this document focuses on DETs exclusively the use of the Key ID using other cryptographic identifiers and how to distinguish between them (such as how UAS ID and UAS ID Type is used) is out of scope of this document.

## DET Authentication {#det-auth-reg}

For Authentication use of a DET, registration requires the following additional data elements: `key_id`, `self_endorsement`. {{se-handling}} MUST be followed.

## DET Session ID {#det-id-reg}

For the registration of a DET as a Session ID the client is typically the UAS. The mechanisms of how the UAS generates a DET are out of scope for this document.

For Session ID use of a DET, registration requires the following additional data elements: `self_endorsement`. Both {{uas-id-handling}} and {{se-handling}} MUST be followed.

## DET Session ID & Authentication {#det-id-auth-reg}

For Session ID & Authentication use of a DET, registration requires the following additional data elements: `key_id`, `self_endorsement`. Both {{uas-id-handling}} and {{se-handling}} MUST be followed.

# Differentiated Access Process {#dap}

Per {{RFC9434}} all information classified as private is stored in a datastore protected using some form of differentiated access (i.e. AAA) to satisfy REG-2 from {{RFC9153}}.

Differentiated access, as a process, is a requirement for DIMEs as defined in {{RFC9153}} by the combination of PRIV-1, PRIV-3, PRIV-4, REG-2 and REG-4. {{RFC9434}} further elaborates on the concept by citing RDAP (from {{RFC7480}}, {{RFC9082}} and {{RFC9083}}) as a potential means of fulfilling this requirement.

Typically the cognizant authority is the primary querant of private information from a DIME if a Session ID is reported (the case of the owner of the private information is ignored for the moment). This capability MAY be delegated to other parties at the authorities discretion (be it to a single user or many), thus requiring a flexible system to delegate, determine and revoke querent access rights for information. XACML MAY be a good technology choice for this flexibility.

It is noted by the authors that as this system scales the problem becomes a, well known and tricky, key management problem. While recommendations for key management are useful they are not necessarily in scope for this document as best common practices around key management should already be mandated and enforced by the cognizant authorities in their existing systems. This document instead focuses on finding a balance for generic wide-spread interoperability between DIMEs with authorities and their existing systems in a Differentiated Access Process (DAP).

A system where cognizant authorities would require individual credentials to each HDA is not scalable, nor practical. Any change in policy would require the authority to interact with every single HDA (active or inactive) to grant or revoke access; this would be tedious and prone to mistakes. A single credential for a given authority is also strongly NOT RECOMMENDED due to the security concerns it would entail if it leaked.

A zero-trust model would be the most appropriate for a DAP; being highly flexible and robust. Most authorities however use "oracle" based systems with specific user credentials and the oracle knowing the access rights for a given user. This would require the DAP the have some standard mechanism to locate and query a given oracle for information on the querent to determine if access is granted.

DRIP has no intention to develop a new "art" of key management, instead hoping to leverage existing systems and be flexible enough to adapt as new ones become popular.

# DRIP in the Domain Name System {#dns}

Per {{RFC9434}} all information classified as public is stored in the DNS to satisfy REG-1 from {{RFC9153}}.

The apex for domain names MUST be under the administrative control of ICAO, the international treaty organization providing the critical coordination platform for civil aviation. ICAO SHOULD be responsible for the operation of the DNS-related infrastructure for these domain name apexes. It MAY chose to run that infrastructure directly or outsource it to competent third parties or some combination of the two. ICAO SHOULD specify the technical and administrative criteria for the provision of these services: contractual terms (if any), reporting, uptime, SLAs (if any), DNS query handling capacity, response times incident handling, complaints, law enforcement interaction and so on.

The delegation of civil aviation authorities to RAAs is already done per {{iso3166}} using their ISO 3166-1 Numeric Codes. Since these are public, any entity can stand up an RAA with that value. ICAO SHOULD be the root of trust in a Endorsement or certificate chain that provides validation of any of these specific RAAs, in the ISO RAA range, thus protecting against bad actors standing up fraudulent RAAs. This also ensures DRIP complies with national law and regulation since these are matters of national sovereignty.

Each national aviation authority SHOULD be responsible for the operation of the DNS-related infrastructure for their delegated subdomains. As with the domain apexes overseen by ICAO, each national aviation authority  MAY chose to run that infrastructure directly or outsource it to competent third parties or some combination of the two. National aviation authorities SHOULD specify the technical and administrative criteria for the provision of these services: contractual terms (if any), reporting, uptime, SLAs (if any), DNS query handling capacity, response times, incident handling, complaints, law enforcement interaction and so on. These are National Matters where national law/regulation prevail. National policy and regulations will define how long DNS data are stored or archived.

DNSSEC is strongly RECOMMENDED (especially for RAA-level and higher zones). When a DIME decides to use DNSSEC they SHOULD define a framework for cryptographic algorithms and key management {{RFC6841}}. This may be influenced by frequency of updates, size of the zone, and policies.

Static UAS specific information that is publicly available MAY also be stored in DNS but is out of scope for this document.

> Author Note: proposal for a UAS RR that is a CBOR map of static UAS data elements (UAS ID, UAS Type, Self Description, etc.)

## DRIP Entity Tags {#det-dns}

The REQUIRED mechanism is to place any information into `ip6.arpa` when using a DET. Since the DET is an IPv6 address it can be nibble-reversed and used in the zone, per standard conventions.

The prefix `2001:30/28` is registered with IANA {{RFC9374}} and `3.0.0.1.0.0.2.ip6.arpa` -- the corresponding reverse domain -- SHOULD be under the administrative control of the Apex. In addition to the DNS infrastructure for `3.0.0.1.0.0.2.ip6.arpa`, the Apex SHOULD be responsible for the allocation of IPv6 addresses in this prefix. An addressing plan will need to be developed.

Distribution of HHIT (IPv6 address) blocks SHOULD be done using the 14-bit RAA space as a framework. The Apex SHOULD allocate blocks to each entity who can then assign them to HDAs in accordance with local law and policy. All HDAs MUST have an IPv6 address in `2001:30/28`. A discrete zone SHOULD be delegated for each HDA. These MUST contain an DET resource record ({{det-rr}}) for itself.

Reverse lookups of these IPv6 addresses will translate the address into a domain name in the manner defined in {{RFC1886}}. However, these lookups will query for, depending on what is required: HIP, DET, TLSA, URI, or PTR RRTypes.

### DET Resource Record {#det-rr}

> Author Note: This section is very much a WIP, comments are welcome.

The DET Resource Record is a metadata record for various bits of DRIP specific information that isn't available in pre-existing DNS RR Types (such as URI or HIP).

~~~~
<domain> DET IN ( DET TYPE STATUS HID SN Endorsement )

DET = Base16 DET
TYPE = enumeration of Type of DET
STATUS = enumeration of Status of DET
HID = HID Abbreviation
SN = Serial Number
Endorsement = Broadcast Endorsement
~~~~

#### Type {#rr-type}

This field is a single byte with values defined in {{det-type}}.

It is envisioned that there may be many types of DETs in use. In some cases it may be helpful to understand the DETs role in the ecosystem like described in {{drip-dki}}.

#### Status {#rr-status}

This field is a single byte with values defined in {{det-status}}.

A DET can go through various states during its life-cycle in the ecosystem. It is helpful for a querant to understand the current status as a further requirement for verification.

#### HID Abbreviation {#rr-hid}

This field is an fixed length ASCII encoded string of 20 bytes null padded. When not included the field MUST be filled with nulls.

The specific contents of this field are not defined here, but a recommendation/example can be found in {{hid-abbreviation}}.

#### Serial Number {#rr-sn}

This field is an fixed length ASCII encoded string of 20 bytes null padded {{CTA2063A}}. When not included the field MUST be filled with nulls.

This covers the "public mapping to DET" when a user/manufacturer already has a Serial Number that can not change and wishes to do DRIP Authentication.

#### Endorsement {#rr-endorsement}

This field is the binary encoded Broadcast Endorsement ({{be}}) of the DET. This object is a fixed length of 136 bytes.

# Endorsements

DRIP Endorsements are defined in a CDDL {{RFC8610}} structure ({{endorsement-cddl}}) that can be encoded to CBOR, JSON or have their CDDL keys removed and be sent as a binary blob. When the latter is used very specific forms are defined with naming conventions to know the data fields and their lengths for parsing and constrained environments. CBOR is the preferred encoding format.

The CDDL was derived from the more specific structure developed for {{drip-auth}}. As such the structures found in {{drip-auth}}, such as the UA Signed Evidence and the contents of DRIP Link (known as a Broadcast Endorsement), are a subset of the below definition in a strict binary form.

{{drip-endorsements}} specifies specific Endorsement structures for the UAS RID use-case.

> Note: this section uses the term HHIT instead of DET as the Endorsements are designed to be generic and re-useable for other HHIT use-cases. Specific use-cases SHOULD add new keys for each section (if required) and define the valid keys and encoding forms for their use-case.

## Endorsement Structure

~~~~
endorsement = {
    ; TODO: add tag for self-describing type or leave up to cbor?
    scope: {
        vnb: number,
        vna: number,
        * tstr => any
    },
    evidence: bstr,
    endorser: {
        identity: {
            hhit: bstr .size 16, ? hi: bstr // * tstr => any
        },
        signature: {
            sig: bstr,
            * tstr => any
        }
    }
}
~~~~
{:fig #endorsement-cddl title="Endorsement CDDL"}

### Scope

The `scope` section is more formally "the scope of validity of the endorsement". The scope can come in various forms but MUST always have a "valid not before" (`vnb`) and "valid not after" (`vna`) timestamps.

Other forms of the scope could for example be a 4-dimensional volume definition. This could be in raw latitude, longitude, altitude pairs or may be a URI pointing to scope information. Additional scope fields are out of scope for this document and should be defined for specific Endorsement structures if they are desired.

### Evidence

The `evidence` section contain a byte string of evidence. Specific content of evidence (such as subfields, length and ordering) is defined in specific Endorsement structures.

### Identity

The `identity` section is where the main identity information of the signer of the Endorsement is found. The identity can take many forms such as a handle to the identity (e.g. an HHIT), or can include more explicit data such as the public key (e.g. an HI). Other keys, for different identifiers, can be provided and MUST be defined in their specific Endorsement.

The length of the `hi` can be determined when using `hhit` by decoding the provided IPv6 address. The prefix will inform of the ORCHID construction being used, which informs the locations of the OGA ID in the address. The OGA ID will then inform the user of the key algorithm selected which has the key length defined.

### Signature

The `signature` section contain the signature data for the Endorsement. The signature itself MUST be provided under the `sig` key. Other forms or data elements could also be present in the `signature` section if specified in a specific Endorsement. Signatures MUST be generated using the preceding sections in their binary forms (i.e. as a bytestring with no keys).

# X.509 Certificates {#x509}

## Certificate Policy and Certificate Stores

X.509 certificates are optional for the DRIP entities covered in this document. DRIP endpoint entities (EE) (i.e., UA, GCS, and Operators) may benefit from having X.509 certificates. Most of these certificates will be for their DET and some will be for other UAS identities. To provide for these certificates, some of the other entities (e.g. USS) covered in this document will also have certificates to create and manage the necessary PKI structure.

Three certificate profiles are defined, with examples, and explained in {{drip-dki}}. Each has a specific role to play and an EE may have its DET enrolled in all of them. There is a ‘Lite’ profile that would work well enough on constrained communication links for those instances where various issues push the use of X.509. There is a ‘Basic; profile that is more in line with {{RFC5280}} recommendations, but is still small enough for many constrained environments. Finally there is a profile to directly add DET support into the civil/general aviation certificates as discussed below.

A Certificate Authority (CA) supporting DRIP entities MAY adhere to the ICAO's Aviation Common Certificate Policy (ACCP). The CA(s) supporting this CP MUST either be a part of the ACCP cross-certification or part of the ACCP CA Trust List. It is possible that future versions of the ACCP will directly support the DRIP Basic profile.

> Authors Note: ACCP is ICAO Doc 10169 Aviation Common Certificate Policy (ACCP). I can’t get a url for that, but so far these is no changes from v 0.93 of the old IATF CP; changes are in the works then will be posted, so continue to reference IATF CP

EEs may use their X.509 certificates, rather than their rawPublicKey (i.e. HI) in authentication protocols (as not all may support rawPublicKey identities). Short lived DETs like those used for a single operation or even for a day's operations may not benefit from X.509. Creating then almost immediately revoking these certificates is a considerable burden on all parts of the system. Even using a short notAfter date will not completely mitigate the burden of managing these certificates. That said, many EEs will benefit to offset the effort. It may also be a regulator requirement to have these certificates. Finally, certificates can provide the context of use for a DET (via policy constraint OIDs).

Typically an HDA either does or does not issue a certificate for all its DETs. An RAA may specifically have some HDAs for DETs that do not want/need certificates and other HDAs for DETs that do need them. These types of HDAs could be managed by a single entity thus providing both environments for its customers.

It is recommended that DRIP X.509 certificates be stored as DNS TLSA Resource Records, using the DET as the lookup key. This not only generally improves certificate lookups, but also enables use of DANE {{RFC6698}} for the various servers in the UTM and particularly DIME environment and DANCE {{dane-clients}} for EEs (e.g. {{drip-secure-nrid-c2}}). All DRIP certificates MAY alternatively be available via RDAP. LDAP/OCSP access for other UTM and ICAO uses SHOULD also be provided.

## Certificate Management

PKIX standard X.509 issuance practices should be used. The certificate request SHOULD be included in the DET registration request. A successful DET registration then MUST include certificate creation, store, and return to the DET registrant. It is possible that the DET registration is actually an X.509 registration. For example, PKIX CSR may be directly used and the DET registration and Endorsement creation are a addition to this process. Further ACME may be directly extendable to provide the DET registration.

Note that CSRs do not include the certificate `validityDate`; adding that is done by the CA.  If in the registration process, the EE is the source of `notBefore` and `notAfter` dates, they need to be sent along with the CSR.

Certificate revocation will parallel DET revocation. TLSA RR MUST be deleted from DNS and RDAP, LDAP, and OCSP return revoked responses. CRLs SHOULD be maintained per the CP.

## Examples

For full examples of X.509 Certificates and the process to use them see {{drip-dki}}.

## Alternative Certificate Encoding

The CBOR Encoded X.509 Certificates (C509 Certificates) {{cbor-cert}} provides a standards-based approach to reduce the size of X.509 certificates both on-the-wire and in storage. The PKI-Lite RAA certificate example in Appendix B.2 is 331 bytes. The matching C509 certificate is 183 bytes. This sort of difference may have significant impact both on UAS storage requirements and over-the-air transmission impact.

C509 provides two approaches for encoding X.509:

1. An invertible CBOR re-encoding of DER encoded X.509 certificates {{RFC5280}}, which can be reversed to obtain the original DER encoded X.509 certificate.
2. Natively signed C509 certificates, where the signature is calculated over the CBOR encoding instead of over the DER encoding as in 1. This removes the need for ASN.1 and DER parsing and the associated complexity but they are not backwards compatible with implementations requiring DER encoded X.509.

The invertible CBOR encoding may be sufficient for most needs. The CBOR objects clearly indicate which approach was used, so that the receiver can properly process the C509 object. For interoperability in DRIP, it is recommended that invertible CBOR encoding be used.

Using the invertible CBOR encoding is achieved through in-line libraries that convert in the desired direction. Since it is not expected that DNS protocols to implement this conversion, the DET RR SHOULD contain the normal X.509 DER encoding. The CBOR encoding MAY be used, but operational experience will be needed to see if there are measurable gains in doing so.

# IANA Considerations

## Delegation of Nibble Reversed IPv6 Prefix

For DRIP to function in a interoperable way the easiest way to allow look up of DETs is through the already existing `ip6.arpa` domain structure (as defined in this document). Here IPv6 addresses are nibble reversed and usually have PTR records.

With DRIP the prefix `2001:30/28` has been allocated by IANA already for DRIP use. However its representative reverse domain in `ip6.arpa` has not.

There are a number of questions in this area for DRIP:

1. What organization would have administrative control over the nibble-reversed `ip6.arpa` block for `2001:30/28`?
   - How do they obtain this and from whom?
   - What is the SLA between IANA/ICANN and the administrative organization for nibble-reversed `2001:30/28`?
2. What organization would have technical control (i.e. day to day operations) over the nibble-reversed `ip6.arpa` block for `2001:30/28`?
3. How are delegation/allocation of further nibble-reversed sub-blocks from `2001:30/28` handled by the administrative organization?
   - This is partly covered in this document already (Apex->RAA->HDA)
   - What is the SLA between the administrative organization and sub-organizations given delegations/allocations? This might be more general guidelines than an actual SLA?
4. What goes into a nibble-reversed `ip6.arpa` domain for DRIP at each level?

This is not an exhaustive list of questions, this is more to get discussion going.

## IANA DRIP Registry

### Endorsement Fields {#endorsement-fields}

This document requests a new registry for Endorsement fields under the [DRIP registry group](https://www.iana.org/assignments/drip/drip.xhtml).

Endorsement Fields:

: list of field keys to be used in an Endorsement and what section(s) they can be used in. Future additions to this registry are to be made through First Come First Served (Section 4.4 of {{RFC8126}}). The following values are defined:

| Field Name | Type | Useable Sections | Description |
|----------- | ---- | ---------------- | ----------- |
| vna        | number | scope | Valid Not After, UTC Unix Timestamp |
| vnb        | number | scope | Valid Not Before, UTC Unix Timestamp |
| hhit       | bstr | identity | Hierarchial Host Identity Tag (HHIT), fixed size of 16 |
| hi         | bstr | identity | Host Identity (HI) |
| sig        | bstr | signature | Signature |

### DET Type {#det-type}

This document requests a new registry for DET Type under the [DRIP registry group](https://www.iana.org/assignments/drip/drip.xhtml).

DET Type:

: numeric, 8 bit, field of the DET RR to encode the DET Type. Future additions to this registry are to be made through First Come First Served (Section 4.4 of {{RFC8126}}). The following values are defined:

| Type | Value | Description |
| ---- | ----- | ----------- |
| Not Defined | 0 | - |
| Endpoint Entity (EE) | 1 | - |
| Issuer CA | 2 | - |
| Authentication CA | 3 | - |

### DET Status {#det-status}

This document requests a new registry for DET Status under the [DRIP registry group](https://www.iana.org/assignments/drip/drip.xhtml).

DET Status:

: numeric, 8 bit, field of the DET RR to encode the DET Status. Future additions to this registry are to be made through First Come First Served (Section 4.4 of {{RFC8126}}). The following values are defined:

| Status | Value | Description |
| ------ | ----- | ----------- |
| Not Defined | 0 | - |
| Inactive | 1 | - |
| Active | 2 | - |

# Security Considerations

## Key Rollover & Federation

During key rollover the DIME MUST inform all children and parents of the change - using best standard practices of a key rollover.

A DET has a natural ability for a single DIME to hold different cryptographic identities under the same HID values. This is due to the lower 64-bits of the DET being a hash of the public key and the HID of the DET being generated. As such during key rollover, only the lower 64-bits would change and a check for a collision would be required.

This attribute could also allow for a single DIME to be "federated" across multiple DETs sharing the same HID value. This method of deployment has not been thoroughly studied at this time. An endpoint such as in {{child-dime}} is a possible place to have these functions.

## DET Generation {#det-gen-concern}

> Author Note: is this section valid anymore? Perhaps we hard specify that devices ONLY generate on their own hardware instead of "out-sourcing" as this section implies.

Under the FAA {{FAA-RID-NPRM}}, it is expecting that IDs for UAS are assigned by the UTM and are generally one-time use. The methods for this however are unspecified leaving two options.

Option 1:

> The entity generates its own DET, discovering and using the RAA and HDA for the target DIME. The method for discovering a DIME's RAA and HDA is out of scope here. This allows for the device to generate an DET to send to the DIME to be accepted (thus generating the required Self-Endorsement) or denied.

Option 2:

> The entity sends to the DIME its HI for it to be hashed and result in the DET. The DIME would then either accept (returning the DET to the device) or deny this pairing.

Keypairs are expected to be generated on the device hardware it will be used on. Due to hardware limitations and connectivity it is acceptable, though not recommended, under DRIP to generate keypairs for the Aircraft on Operator devices and later securely inject them into the Aircraft. The methods to securely inject and store keypair information in a “secure element” of the Aircraft is out of scope of this document.

# Public Key Exposure

DETs are built upon asymmetric keypairs. As such the public key must be revealed to enable clients to perform signature verifications.

While unlikely the forging of a corresponding private key is possible if given enough time (and computational power). As such it is RECOMMENDED that the public key for any DET not be exposed in DNS (using the HIP RR) until it is required.

Optimally this requires the UAS somehow signal the DIME that a flight using a specific Session ID is underway or complete. It may also be facilitated under UTM if the USS (which may or may not be a DIME) signals when a given operation using a Session ID goes active.

# Contributors

Thanks to Stuart Card (AX Enterprize, LLC) and Bob Moskowitz (HTT Consulting, LLC) for their early work on the DRIP registries concept. Their early contributions laid the foundations for the content and processes of this architecture and document. Bob Moskowitz is also instrumental in the PKIX work defined in this document with his parallel work in ICAO.

--- back

# HID Abbreviation Recommendation {#hid-abbreviation}

On receiver devices a DET can be translated to a more human readable form such as: `{RAA Abbreviation} {HDA Abbreviation} {Last 4 Characters of DET Hash}`. An example of this would be `US FAA FE23`.

To support this DIMEs are RECOMMENDED to have an abbreviation that could be used for this form. These abbreviations SHOULD be a maximum of six characters (for each section) in length. Spaces MUST NOT be used and be replaced with either underscores (`_`) or dashes (`-`).

The concatenation of `{RAA Abbreviation}` and `{HDA Abbreviation}` with a space between them can be what fills in the `HID` field of the DET RR in {{det-rr}}.

For RAAs allocated in the ISO range {{iso3166}}, the RAA abbreviation SHOULD be set to the ISO 3166-1 country code (either Alpha-2 or Alpha-3). A common abbreviation for an RAAs four allocated RAA values are out of scope. Other documents such as {{drip-dki}} may have more specific recommendations or requirements.

If a DIME does not have an abbreviation or it can not be looked up then the receiver MUST use the uppercase 4-character hexadecimal encoding of the field it is missing when using this form.

# DRIP Fully Qualified Domain Names {#drip-fqdn}

## DRIP Entity Tag {#det-fqdn}

> {hash}.{oga_id}.{hda}.{raa}.{prefix}.{apex}.

When building a DET FQDN it MUST must be built using the exploded (all padding present) form of the IPv6 address.

~~~~
Apex: .example.com
DET: 2001:0030:0280:1405:c465:1542:a33f:dc26
ID: c4651542a33fdc26
OGA: 05
HID: 0028014
HDA: 0014
RAA: 000a
Prefix: 2001003
FQDN: c4651542a33fdc26.05.0014.000a.2001003.example.com
~~~~

# DRIP Endorsements for UAS {#drip-endorsements}

## Generic Endorsement {#ge}

~~~~
generic_endorsement = {
    scope: {
        vnb: number,
        vna: number
    },
    evidence: bstr,
    endorser: {
        identity: {
            hhit: bstr .size 16
        },
        signature: {
            sig: bstr
        }
    }
}
~~~~
{:fig #ge-cddl title="Generic Endorsement CDDL"}

`evidence` is a binary string with specified contents (in format and ordering) by specific use-cases. As an example this format is used by {{drip-auth}} to support Authentication over F3411 constrained links. `evidence` data is defined by {{drip-auth}} for DRIP Wrapper, Manifest and Frame formats.

## Self Endorsement {#se}

~~~~
self_endorsement = {
    scope: {

        vnb: number,
        vna: number
    },
    evidence: bstr,
    endorser: {
        identity: {
            hhit: bstr .size 16
        },
        signature: {
            sig: bstr
        }
    }
}
~~~~
{:fig #se-cddl title="Self Endorsement CDDL"}

Used during registration process as an input. `evidence` is filled with the corresponding HI of the `hhit`.

~~~~
0                   1                   2                   3
0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+---------------+---------------+---------------+---------------+
|                              VNB                              |
+---------------+---------------+---------------+---------------+
|                              VNA                              |
+---------------+---------------+---------------+---------------+
|                                                               |
|                                                               |
|                                                               |
|                              HI                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
+---------------+---------------+---------------+---------------+
|                                                               |
|                             HHIT                              |
|                                                               |
|                                                               |
+---------------+---------------+---------------+---------------+
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                           Signature                           |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
+---------------+---------------+---------------+---------------+
~~~~
{:fig #se-binary title="Self Endorsement Binary"}

~~~~
TODO
~~~~
{:fig #se-cbor title="Self Endorsement CBOR"}

## Broadcast Endorsement {#be}

~~~~
broadcast_endorsement = {
    scope: {
        vnb: number,
        vna: number
    },
    evidence: bstr,
    endorser: {
        identity: {
            hhit: bstr .size 16
        },
        signature: {
            sig: bstr
        }
    }
}
~~~~
{:fig #be-cddl title="Broadcast Endorsement CDDL"}

Defined by {{drip-auth}} in a binary format to support Authentication over F3411 constrained links. Used in the DRIP Link format. A required output of registration to a DIME at any level. `evidence` is a binary string of the concatenation of a child entities (e.g. a UA) DET/HHIT and its associated HI. `hhit` is of the parent entity (e.g. a DIME).

~~~~
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+---------------+---------------+---------------+---------------+
|                              VNB                              |
+---------------+---------------+---------------+---------------+
|                              VNA                              |
+---------------+---------------+---------------+---------------+
|                                                               |
|                            HHIT of                            |
|                             Child                             |
|                                                               |
+---------------+---------------+---------------+---------------+
|                                                               |
|                                                               |
|                                                               |
|                             HI of                             |
|                             Child                             |
|                                                               |
|                                                               |
|                                                               |
+---------------+---------------+---------------+---------------+
|                                                               |
|                            HHIT of                            |
|                            Parent                             |
|                                                               |
+---------------+---------------+---------------+---------------+
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                           Signature                           |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
+---------------+---------------+---------------+---------------+
~~~~
{:fig #be-binary title="Broadcast Endorsement Binary"}

~~~~
TODO
~~~~
{:fig #be-cbor title="Broadcast Endorsement CBOR"}

# DNS Examples

## Operator {#dns-op}

~~~~text
@ORIGIN 0.0.0.8.f.f.f.3.0.0.1.0.0.2.ip6.arpa
e.0.3.0.5.3.a.2.5.2.5.f.a.8.a.b.5.0 IN DET 
( 2001003fff800005ba8af5252a35030e 0 1 "TEST DRIP" "" ... )
e.0.3.0.5.3.a.2.5.2.5.f.a.8.a.b.5.0 IN HIP 
( 5 2001003fff800005ba8af5252a35030e ... )
e.0.3.0.5.3.a.2.5.2.5.f.a.8.a.b.5.0 IN URI 
( https://example.com/operator/* )
~~~~

## Session ID {#dns-sid}

~~~~text
@ORIGIN 0.0.0.8.f.f.f.3.0.0.1.0.0.2.ip6.arpa
4.d.6.0.3.6.1.6.b.5.3.9.e.c.6.b.5.0 IN DET 
( 2001003fff800005b6ce935b616306d4 0 1 "TEST DRIP" "" ... )
4.d.6.0.3.6.1.6.b.5.3.9.e.c.6.b.5.0 IN HIP 
( 5 2001003fff800005b6ce935b616306d4 ... )
4.d.6.0.3.6.1.6.b.5.3.9.e.c.6.b.5.0 IN URI 
( https://example.com/session/* )
~~~~

## Child DIME {#dns-child}

~~~~text
RAA:
@ORIGIN 8.f.f.f.3.0.0.1.0.0.2.ip6.arpa
0.0.0 IN NS 0.0.0.8.f.f.f.3.0.0.1.0.0.2.ip6.arpa

HDA:
@ORIGIN 0.0.0.8.f.f.f.3.0.0.1.0.0.2.ip6.arpa
9.6.6.b.b.0.6.a.4.9.3.6.8.4.e.4.5.0 IN DET 
( 2001003fff8000054e486394a60bb669 0 1 "TEST DRIP" "" ... )
9.6.6.b.b.0.6.a.4.9.3.6.8.4.e.4.5.0 IN HIP 
( 5 2001003fff8000054e486394a60bb669 ... )
9.6.6.b.b.0.6.a.4.9.3.6.8.4.e.4.5.0 IN URI 
( https://example.com/dime/* )
~~~~
