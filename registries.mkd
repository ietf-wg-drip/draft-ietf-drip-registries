---
coding: utf-8

title: DRIP Entity Tag (DET) Identity Management Architecture
abbrev: DETIM Architecture
docname: draft-ietf-drip-registries-07
category: info

ipr: trust200902
area: Internet
wg: drip Working Group
kw: Internet-Draft
cat: info

stand_alone: yes
pi: [toc, sortrefs, symrefs, comments]

author:

-   ins: A. Wiethuechter
    name: Adam Wiethuechter
    org: AX Enterprize, LLC
    street: 4947 Commercial Drive
    city: Yorkville
    region: NY
    code: 13495
    country: USA
    email: adam.wiethuechter@axenterprize.com
-   ins: J. Reid
    name: Jim Reid
    org: RTFM llp
    street: St Andrews House
    city: 382 Hillington Road, Glasgow Scotland
    code: G51 4BL
    country: UK
    email: jim@rfc1035.com

normative:
    RFC8610: # CDDL
    RFC9153: # drip-requirements
    RFC9374: # drip-det
    drip-arch: I-D.ietf-drip-arch

informative:
    RFC2915: # naptr
    RFC4398:
    RFC5730: # epp
    RFC6698:
    RFC7480: # rdap-http-use
    RFC8005: # hip rr
    RFC8126: # iana-guidelines
    RFC9082: # rdap-query-format
    RFC9083: # rdap-json-responses
    CTA2063A:
        title: ANSI/CTA 2063-A Small Unmanned Aerial Systems Numbers
        author:
        org: "Consumer Technology Association (CTA)"
        target: https://shop.cta.tech/products/small-unmanned-aerial-systems-serial-numbers
        date: 2019-09
    drip-auth: I-D.ietf-drip-auth
    drip-secure-nrid-c2: I-D.moskowitz-drip-secure-nrid-c2
    dane-clients: I-D.ietf-dance-client-auth
    NPRM:
        title: "Notice of Proposed Rule Making on Remote Identification of Unmanned Aircraft Systems"
        author:
        org: "United States Federal Aviation Administration (FAA)"
        date: 2019-12

--- abstract

This document describes the high level architecture for the registration and discovery of DRIP Entity Tags (DETs) using DNS. Discovery of DETs and their artifacts are through the existing DNS structure and methods by using FQDNs. A general overview of the interfaces required between involved components is described in this document with supporting documents giving technical specifications.

--- middle

# Introduction

Registries are fundamental to Unmanned Aircraft System (UAS) Remote ID (RID). Only very limited operational information can be Broadcast, but extended information is sometimes needed. The most essential element of information sent is the UAS ID itself, the unique key for lookup of extended information in relevant registries (see Figure 4 of {{drip-arch}}).

While it is expected that DIME functions will be integrated with UAS Service Supplier (USS) (Appendix A.2 of {{drip-arch}}), who will provide them is not yet determined in most, and is expected to vary between jurisdictions. However this evolves, the essential DIME functions (including the management of identifiers) are expected to remain the same, so are specified herein.

While most data to be sent via Broadcast RID (Section 1.2.1 of {{drip-arch}}) or Network RID (Section 1.2.2 of {{drip-arch}}) is public, much of the extended information in registries will be private. As discussed in Section 7 of {{drip-arch}}, Authentication, Attestation, Authorization, Access Control, Accounting, Attribution, and Audit (AAA) for registries is essential, not just to ensure that access is granted only to strongly authenticated, duly authorized parties, but also to support subsequent attribution of any leaks, audit of who accessed information when and for what purpose, etc. As specific AAA requirements will vary by jurisdictional regulation, provider choices, customer demand, etc., they are left to specification in policies, which should be human readable to facilitate analysis and discussion, and machine readable to enable automated enforcement, using a language amenable to both (e.g., eXtensible Access Control Markup Language (XACML)).

The intent of the access control requirements on registries is to ensure that no member of the public would be hindered from accessing public information, while only duly authorized parties would be enabled to access private information. Mitigation of Denial of Service (DoS) attacks and refusal to allow database mass scraping would be based on those behaviors, not on identity or role of the party submitting the query per se, but querant identity information might be gathered (by security systems protecting DRIP implementations) on such misbehavior.

Registration under DRIP is vital to manage the inevitable collisions in the hash portion of the DRIP Entity Tags (DETs). Forgery of the DETs is still possible, but including it as a part of a public registration mitigates this risk. This document creates the DRIP DET registration and discovery ecosystem.  This includes all components in the ecosystem (e.g., Unmanned Aircraft (UA), Registered Assigning Authority (RAA), Hierarchical HIT Domain Authority (HDA), Ground Control Station (GCS), and USS).

This document uses the Concise Data Definition Language (CDDL) {{RFC8610}} for describing the registration data.

# Abstract Process and Reasoning

In DRIP each entity (DIME, Operator, UA, etc.) is expected to generate a full DRIP Entity Tag {{RFC9374}} on the local device their key is expected to be used. These are registered with a Public Information Registry within the hierarchy along with whatever data is required by the cognizant CAA and the DIME. Any Personally Identifiable Information (PII) is stored in a Private Information Registry protected through industry practice AAA or stronger. In response, the entity will obtain an endorsement from the DIME proving such registration.

Manufacturers that wish to participate in DRIP should not only support DRIP as a Session ID type for their aircraft but could also generate a DET then encode it as a Serial Number. This would allow aircraft under CAA mandates to fly only ID Type 1 (Serial Number) could still use DRIP and most of its benefits. Even if DRIP is not supported for Serial Numbers by a Manufacturer it is hoped that they would still run a DIME to store their Serial Numbers and allow look ups for generic model information. This look up could be especially helpful in UTM for Situational Awareness when an aircraft flying with a Serial Number is detected and allow for an aircraft profile to be displayed.

Operators are registered with a number of registries or their regional RAA. This acts as a verification check when a user performs other registration operations; such as provisioning an aircraft with a new Session ID. It is an open question if an Operator registers to their CAA (the RAA) or multiple USS's (HDA's). PII of the Operator would vary based on the CAA they are under and the DIME.

Finally, aircraft that support using a DET would provision per flight to a USS, proposing a DET to the DIME to generate a binding between the aircraft (Session ID, Serial Number, and Operational Intent), operator and DIME. The aircraft then follows {{drip-auth}} to meet various requirements from {{RFC9153}} during a flight.

## Supported Scenarios

1. UA using manufacturer generated Serial Number for UAS ID. No additional information provided.
2. UA using manufacturer generated Serial Number for UAS ID. Manufacturer using a DIME. Manufacturer MUST provided pointer to additional information via DNS (even if null).
3. UA using manufacturer generated Serial Number which is mapped to a DET by manufacturer for UAS ID. UA using manufacturer generated DET for Authentication. Manufacturer using a DIME. DIME MUST place public DET information into DNS (i.e. HI). DIME MUST provide mapping of Serial Number to DET in DNS. Manufacturer MUST provide pointer to additional information via DNS (even if null).
4. UA using manufacturer generated DRIP enhanced Serial Number for UAS ID. UA using manufacturer generated DET for Authentication. Manufacturer using a DIME. DIME MUST place public information into DNS (i.e. HI) - either directly or as a mapping to a DET. DIME MUST provide pointer to additional information via DNS (even if null).
5. UA using manufacturer generated Serial Number for UAS ID. UA using user generated DET for Authentication. User uses DIME with capability to publically map Serial Number to a DET (via a USS). DIME MUST place public DET information into DNS (i.e. HI). DIME MUST provide mapping of Serial Number to DET in DNS. DIME MUST provide pointer to additional information via DNS (even if null).
6. UA provisioned with DET (i.e. Session ID) with a DIME (via a USS) for UAS ID and Authentication. DIME MUST place public DET information into DNS (i.e. HI). DIME MUST NOT (unless required) provide mapping of DET to Serial Number in DNS. USS MUST provide pointer to additional information via DNS (even if null).

# Terminology {#terminology}

## Required Terminology

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP 14 {{!RFC2119}} {{!RFC8174}} when, and only when, they appear in all capitals, as shown here.

## Additional Definitions

This document makes use of the terms (PII, USS, etc.) defined in {{RFC9153}}. Other terms (DIME, Endorsement, etc.) are from {{drip-arch}}, while others (RAA, HDA, etc.) are from {{RFC9374}}.

# DIME Roles {#dime-roles}

{{drip-arch}} defines the DRIP Identity Management Entity (DIME) as an entity that vets Claims and/or Evidence from a registrant and delivers back Endorsements and/or Certificates in response. The DIME encompasses various logical components and can be classified to serve a number of different roles, which are detailed in the following subsections. The general hierarchy of these roles are illustrated in {{reg-class-fig}}.

{:fig: artwork-align="center"}
~~~~
                +----------+
                |   Apex   | 
                +-o------o-+
                  |      |
******************|******|*****************************
                  |      |
            +-----o-+  +-o-----+
RAAs        |  IRM  |  |  RAA  o------.
            +---o---+  +---o---+      '
                |          |          |
****************|**********|**********|****************
                |          |          |
            +---o---+  +---o---+  +---o---+
HDAs        |  MRA  |  | RIDR  |  |  HDA  |
            +-------+  +-------+  +-------+
~~~~
{:fig #reg-class-fig title="DIME Roles and Hierarchy"}

## Apex

The Apex is a special DIME role that holds the value of RAA=0 and HDA=0. It serves as the branch point from the larger DNS system in which DETs are defined. The Apex generally has as the prefix portion of the HHIT associated with it (such as 2001:30/28) which is assigned by IANA from the non-routable special IPv6 address space for ORCHIDs.

The Apex manages all delegations and allocations of the DET's RAA to various parties.

## Registered Assigning Authority (RAA) {#raa}

RAA's are the upper hierarchy in DRIP (denoted by a 14-bit field (16,384 RAAs) of an DET). An RAA is a business or organization that manages a DIME of HDAs ({{hda}}). Most are contemplated to be Civil Aviation Authorities (CAA), such as the Federal Aviation Authority (FAA), that then delegate HDAs to manage their National Air Space (NAS). This is does not preclude other entities to operate an RAA if the Apex allows it.

For DRIP and the UAS use case it is hoped that ICAO will handle the role of registrating RAAs as an Apex.

An RAA must provide a set of services to allocate HDAs to organizations. It must have a public policy on what is necessary to obtain an HDA. It must maintain a DNS zone minimally for discovering HID RVS servers. All RAA's have two reserved HDA values. 0 (0x0000) for itself in its role as an RAA and 1 (0x0001) if it wishes to offer HDA services. Other HDA values can be allocated or reserved per RAA policy.

> Note: A single RAA may control more than one NAS (for example LU and BE being covered by Skeyes.be). In such a scenario the CAA could either request two different RAA values for each larger region with HDAs delegating smaller spaces; or run under a single RAA with HDAs delegated to cover specific regions. A similar scenario could also occur in the US with the FAA requesting RAAs for each region, for example: North East, South Eat, Midwest, North West, South West. This is up to regulators and their policies.

### ICAO Authority of Manufacturers (IAM) {#irm}

An RAA-level DIME that hands out HDA values to participating Manufacturer's that hold an ICAO Manufacturer Code used in {{CTA2063A}}.

To manage the large ICAO Manufacturer Code space (34  character set; 4 characters; 1,336,336 possible codes) a range of RAA values are set aside for the DRIP use case. These are the RAA values of 2 (0x0002) up to 96 (0x0060). This allows a single HDA for each Manufacturer Code.

## Hierarchial HIT Domain Authority (HDA) {#hda}

An HDA may be an USS, ISP, or any third party that takes on the business to register the actual UAS entities that need DETs.  This includes, but is not limited to UA, GCS, and Operators. It should also provide needed UAS services including those required for HIP-enabled devices (e.g. RVS).

The HDA is a 14-bit field (16,384 HDAs per RAA) of a DET assigned by an RAA.  An HDA should maintain a set of RVS servers for UAS clients that may use HIP.  How this is done and scales to the potentially millions of customers are outside the scope of this document. This service should be discoverable through the DNS zone maintained by the HDA's RAA.

An RAA may assign a block of values to an individual organization. This is completely up to the individual RAA's published policy for delegation. Such policy is out of scope.

### Manufacturers Authority of Aircraft (MAA) {#mra}

An HDA-level DIME run by a manufacturer of UAS systems that participate in Remote ID. Stores UAS Serial Numbers under a specific ICAO Manufacturer Code (assigned to the manufacturer by ICAO).

A DET can be encoded into a Serial Number (see {{RFC9374}}, Section 4.2) and this DIME would hold a mapping from the Serial Number to the DET and its artifacts.

#### Session ID Authority (SIDA) {#ridr}

An HDA-level DIME that holds the binding between a UAS Session ID (for DRIP the DET) and the UA Serial Number. The Serial Number MUST have its access protected to allow only authorized parties to obtain. The Serial Number SHOULD be encrypted in a way only the authorized party can decrypt.

As part of the UTM system they also hold a binding between a UAS ID (Serial Number or Session ID) and an Operational Intent. They may either be a direct logical part of a UAS Service Supplier (USS) or be a UTM wide service to USS's.

## Role Abbreviation in DETs

On receiver devices a DET can be translated to a more human readable form such as: `{RAA Abbreviation} {HDA Abbreviation} {Last 4 Characters of DET Hash}`. An example of this would be `US FAA FE23`. To support this DIMEs are RECOMMENDED to have an abbreviation that could be used for this form. These abbreviations SHOULD be a maximum of six characters in length. Spaces SHOULD NOT be used and be replaced with either underscores (`_`) or dashes (`-`). For RAAs the abbreviation is RECOMMENDED to be set to the ISO 3166 country code (either Alpha-2 or Alpha-3) when allocated to a CAA.

If a DIME does not have an abbreviation or it can not be looked up then the receiver SHOULD use the uppercase 4-character hexadecimal encoding of the field it is missing.

## Text Conventions

When talking about a DIME in documents it should be refered to as the role it is serving. For example a CAA level DIME running services both as an RAA (its primary role in the heirarchy) and as an HDA (optionally) would be be refered to "RAA" when performing its RAA duties and "HDA" when performing its HDA duties.

# DIME Architecture {#dime-arch}

The DIME, in any of its roles ({{dime-roles}}), is comprised of a number of logical components that are depicted in {{dime-arch-fig}}. Any of these components could be delegated to other entities as a service both co-located or remote. For example:

- The Name Server component could be handled by a well-established DNS registrar/registry with the DRIP Provisioning Agent (DPA) ({{dpa}}) interfacing to them
  - Either the DPA or the Registry/Name Server interfaces to the DRIP Information Agent (DIA)
- The DPA, Registry, and Name Server may all be co-located in one implementation with an interface to a DIA offered by another organization from any one of the co-located components

~~~~
+--------------------+
| Registering Client |
+---------o----------+
          | 
**********|******************************************************
*         |        DRIP Identity Management Entity              *
*         |                                                     *
*  +------o-------+      +-------------+      +--------------+  *
*  | DRIP         |      |             |      |              |  *
*  | Provisioning o------o             |      |              |  *
*  | Agent        |      |             |      |              |  *
*  +-------o------+      |             |      |              |  *
*          |             |             |      |              |  *
*          |             | DRIP        |      | Registration |  *
*  +-------o--+          | Information o------o Data         |  *
*  | Registry o----------o Agent       |      | Directory    |  *
*  +-------o--+          |             |      | Service      |  *
*          |             |             |      |              |  *
*          |             |             |      |              |  *
*  +-------o-----+       |             |      |              |  *
*  | Name Server |       |             |      |              |  *
*  +------o------+       +-----o-------+      +------o-------+  *
*         |                    |                     |          * 
*         |                    |                     |          *
**********|********************|*********************|***********
          |                    |                     |
          |            +-------o-------+             |
          '------------o Lookup Client o-------------'
                       +---------------+
~~~~
{:fig #dime-arch-fig title="DIME Logical Components"}

## DRIP Provisioning Agent (DPA) {#dpa}

The DPA performs the important task of vetting information (such as the DRIP Endorsements) coming from clients wishing to register and then delegate (internally or externally) various items to other components in the DIME.

A standard interface over HTTPS MUST be provided for clients to access with JSON or CBOR encoding of objects being sent to the DPA. This interface specification is out of scope for this document.

There MUST be an interface from the DPA to a Registry ({{registry}}) component which handles the DNS specific requirements of the DIME as defined by the Registry. There MAY also be interface from the DPA to a DRIP Information Agent ({{dia}}) as defined by the DIA.

## Registry

The Registry component handles all the required DNS based requirements of the DIME to function for DRIP. This includes the registration and maintenance of various DNS Resource Records.

A standardized interface MUST be implemented for interactions with the DPA ({{dpa}}). This interface MAY be over HTTPS using JSON/CBOR encoding or MAY use the Extensional Provisioning Protocol (EPP) {{RFC5730}}. The detailed specification of either of these interfaces is out of scope for this document.

There MAY be interface from the Registry to a DRIP Information Agent ({{dia}}) as defined by the DIA.

## Name Server (NS) {#nameserver}

The interface of the Name Server to any component (nominally the Registry) in a DIME is out of scope as typically they are implementation specific.

> Author Note: This may be very important here as we should not preclude a USS from running his own Name Server but they are not DNS experts and will need guidance or at least pointers to it to not mess it up. Such as SOA and NS formats to allow delegation if as RAA.

## DRIP Information Agent (DIA) {#dia}

The DIA is the main component handling requests for information from entities outside of the DIME. Typically this is when an Observer looks up a Session ID from an UA and gets pointed to the DIA to obtain information not available publically (i.e. via DNS).

The information contained in the DIA is generally more oriented around the Operator of a given UAS and is thus classified as Personally Identifiable Information (PII). To protect the privacy of an Operator of the UAS this information is not publicly accessible and is only available behind policy driven differentiated access mechanisms. As an example the Serial Number, under the FAA, is classified as PII and can only be accessed by federal entities (such as the FAA themselves).

For DRIP the Registration Data Access Protocol (RDAP) ({{RFC7480}}, {{RFC9082}} and {{RFC9083}}) is the selected protocol to provide policy driven differentiated access for queries of information.

A standard interface over HTTPS MUST be provided for clients to access with JSON/CBOR encoding of objects being sent to the DIA. There MUST also be a standardized interface for the DPA or Registry to add, update or delete information into the DIA. Specific details for these interfaces are out of scope for this document.

An interface defined by the Registration Data Directory Service (RDDS) ({{rdds}}) is also required as specified by the RDDS.

## Registration Data Directory Service (RDDS) {#rdds}

This is the primary information database for the DIA. An interface MUST be provided to the DIA but its specification is out of scope for this document.

# Registration/Provisioning Process

The general process for a registering party is as follows:

1. Verify input Endorsement(s) from registering party
2. Check for collision of DET and HI
3. Populate Registry/Name Server with resource records
4. Populate RDDS via DIA with PII and other info
5. Generate and return DRIP Endorsement(s)

In the following subsections an abbreviated form of {{dime-arch}} using co-located components is used to describe the flow of information. The data elements being transmitted between entities is marked accordingly in each figure for the specific examples.

## Serial Number

> Author Note: this section is a work in progress.

There are four ways a Serial Number is supported (by DRIP):

1. As itself as a clear-text string with additional information
2. As itself as a clear-text string mapped to a DET "post" generation by the manufacturer (for use in authentication) and additional information
3. As itself as a clear-text string mapped to a DET "post" generation by the user (for use in authentication) and additional information
4. As an encoding of an HI and associated DET by the manufacturer (for use in authentication) with additional information

(1) is where a UA is provisioned with a Serial Number by the manufacturer. The manufacturer is running a DIME (probably an MAA) and uses the mechanisms of this document to provide additional information (like elements defined in {{ua-info-registry}}).

(2) is where a UAS is provisioned with a Serial Number and DET by the manufacturer enabling their devices to use {{drip-auth}} and provide additional information. A public mapping of the Serial Number to DET and all public artifacts MUST be provided by the manufacturer. This document RECOMMENDS the manufacturer run an MAA for this task.

(3) is where a UAS has a Serial Number (from the manufacturer) and the user has a mechanism to generate and map a DET to the Serial Number after production. This can provide dynamic signing keys for DRIP Authentication Messages via {{drip-auth}} for UAS that MUST fly only using Serial Numbers. Registration SHOULD be allowed to any relevant DIME that supports it.

(4) is where a UAS manufacturer chooses to use the Serial Number scheme defined in {{RFC9374}} to create Serial Numbers, their associated DETs for {{drip-auth}} and provide additional information. This document RECOMMENDED that the manufacturer "locks" the device from changing its authentication method so identifiers in both the Basic ID and Authentication Message do not desync. The manufacturer MUST be using an MAA for this task, with the mapping between their Manufacturer Code and the upper portion of the DET publically availible.

~~~~
    +-------------------+
    | Unmanned Aircraft |
    +--o---o------------+
       |   ^
   (a) |   | (b)
       |   |
*******|***|*****************************
*      |   |    DIME: MRA               *
*      |   |                            *
*      v   |             +----------+   *
*   +--o---o--+          |          |   *
*   |   DPA   o--------->o          |   *
*   +----o----+   (d)    |          |   *
*        |               |          |   *
*        | (c)           | DIA/RDDS |   *
*        v               |          |   *
*   +----o--------+      |          |   *
*   | Registry/NS |      |          |   *
*   +-------------+      |          |   *
*                        +----------+   *
*                                       *
*****************************************

(a) Serial Number,
    UA Information,
    Self-Endorsement: UA
(b) Success Code,
    Broadcast Endorsement: MRA on UA
(c) HIP RR,
    CERT RRs
(d) UA Information
~~~~
{:fig #dime-sn-example title="Example DIME:MRA with Serial Number (DET) Registration"}

The unmanned aircraft, intending to use DRIP, generates a keypair, DET and `Self-Endorsement: UA` using the RAA and HDA values specified by the manufacturers DIME (running as an MRA). The DET is converted into a Serial Number (per {{RFC9374}}) or the manufacturer creates their own Serial Number.

The Serial Number, UA information and the `Self-Endorsement: UA` are sent to the manufacturers DIME. The DIME validates the Self-Endorsement and checks for DET and HI collisions in the Name Server/DIA. A `Broadcast Endorsement: DIME on UA` is generated which is provisioned into the aircraft for use when using the Serial Number as its UAS ID. In the Name Server HIP RRs are created using the DET FQDN while a CNAME points the Serial Number FQDN to the DET FQDN.

> Note: {{dime-sn-example}} is specific for a DET-encoded or DET-linked Serial Number. The Endorsements in (a) and (b) as well as RRs in (c) would not be present for non-DET based Serial Numbers.

Additional UA Information has a set of valid item keys defined in {{ua-info-registry}}. The items present for a given interaction is defined by future documents, local regulations and implementation specific capabilities.

## Operator

Provided either by USS or CAA run HDAs. Regulation might require interaction between them. An Operator can request that certain information normally generated and provisioned into DNS be omitted due to privacy concerns.

~~~~
    +----------+
    | Operator |
    +--o---o---+
       |   ^
   (a) |   | (b)
       |   |
*******|***|*****************************
*      |   |    DIME: HDA               *
*      |   |                            *
*      v   |             +----------+   *
*   +--o---o--+          |          |   *
*   |   DPA   o--------->o          |   *
*   +----o----+   (d)    |          |   *
*        |               |          |   *
*        | (c)           | DIA/RDDS |   *
*        v               |          |   *
*   +----o--------+      |          |   *
*   | Registry/NS |      |          |   *
*   +-------------+      |          |   *
*                        +----------+   *
*                                       *
*****************************************

(a) Operator Information,
    Operator Self-Endorsement
(b) Success Code,
    Generic Endorsement: HDA on Operator
(c) HIP RR,
    CERT RRs
(d) Operator Information
~~~~
{:fig #dime-operator-example title="Example DIME:HDA with Operator (DET) Registration"}

The Operator generates a keypair and DET as specified in {{RFC9374}} along with a self-signed endorsement (`Self-Endorsement: Operator`). The RAA and HDA values used in the DET generation for the Operator are found by referencing their selected DIME of choice (in {{dime-operator-example}} an HDA).

The self-signed endorsement along with other relevant information (such as Operator PII) is sent to the DIME over a secure channel. The specification of this secure channel is out of scope for this document.

The DIME cross checks any personally identifiable information as required. `Self-Endorsement: Operator` is verified. The DET and HI is searched in the DIME DIA and Name Server to confirm that no collisions occur. A new endorsement is generated (`Generic Endorsement: DIME on Operator`) and sent securely back to the Operator. Resource Records for the HI and Endorsements are added to the DIME Registry/Name Server.

With the receipt of `Generic Endorsement: DIME on Operator` the registration of the Operator is complete.

> Note: (c) in {{dime-operator-example}} MAY be requested by the Operator to be omitted due to PII concerns.

The definition of Operator Information is out of scope of this document and left to local regulations.

## Session ID

Session IDs are generally handled by HDAs, specifically RIDRs. In {{dime-sid-example}} the UAS comprises of an unmanned aircraft and a Ground Control Station (GCS). Both parties are involved in the registration process.

~~~~
    +---------+
    |   UAS   |
    +--o---o--+
       |   ^
   (a) |   | (b)
       |   |
*******|***|*****************************
*      |   |    DIME: RIDR              *
*      |   |                            *
*      v   |             +----------+   *
*   +--o---o--+          |          |   *
*   |   DPA   o--------->o          |   *
*   +----o----+   (d)    |          |   *
*        |               |          |   *
*        | (c)           | DIA/RDDS |   *
*        v               |          |   *
*   +----o--------+      |          |   *
*   | Registry/NS |      |          |   *
*   +-------------+      |          |   *
*                        +----------+   *
*                                       *
*****************************************

(a) Mutual Endorsement: RIDR on GCS,
    Generic Endorsement: GCS on UA,
    Session ID Information
(b) Success Code,
    Broadcast Endorsement: RIDR on UA,
    Generic Endorsement: RIDR on UAS
(c) HIP RR,
    TLSA, RR,
    CERT RRs
(d) Session ID Information
~~~~
{:fig #dime-sid-example title="Example DIME:RIDR with Session ID (DET) Registration"}

Through mechanisms not specified in this document the Operator should have methods (via the GCS) to instruct the unmanned aircraft onboard systems to generate a keypair, DET and `Self-Endorsement: UA`. The `Self-Endorsement: UA` is extracted by the Operator onto the GCS.

The GCS is already pre-provisioned and registered to the DIME with its own keypair, DET, `Self-Endorsement: GCS` and `Generic Endorsement: RIDR on GCS`. The GCS creates a new `Generic Endorsement: GCS on UA` and also creates `Mutual Endorsement: RIDR on GCS`. These new endorsements along with Session ID Information are sent to the DIME via a secure channel.

The DIME validates all the endorsements and checks for DET and HI collisions in the Name Server/DIA using the proposed UA DET. A `Broadcast Endorsement: DIME on UA` is generated. An `Generic Endorsement: RIDR on UAS` is generated using the `Generic Endorsement: GCS on UA`. HIP and CERT RRs are provisioned into the Registry/Name server. Both endorsements are back to the GCS on a secure channel.

The GCS then injects the `Broadcast Endorsement: RIDR on UA` securely into the unmanned aircraft. `Endorsement: RIDR on GCS` is securely stored by the GCS.

> Note: in {{dime-sid-example}} the Session ID Information is expected to contain the Serial Number along with other PII specific information (such as UTM data) related to the Session ID.

Session ID Information is defined as the current model:

~~~~
sessionid_info = {
    serial: tstr .size 20,
    session_id: tstr,
    operational_intent: tstr,
    intent_src: tstr,
    operator_id: tstr,
    * tstr: any
}
~~~~

Future standards or implementations MAY add other keys to this list (for local features and/or local regulation).

### UA Based

There may be some unmanned aircraft that have their own Internet connectivity allowing them to register a Session ID themselves without outside help from other devices such as a GCS. When such a system is in use its imperative that the Operator has some method to create the `Generic Endorsement: Operator on UA` to send to the DIME. The process and methods to perform this are out of scope for this document but MUST be done in a secure fashion.

### UAS Based

Most unmanned aircraft will not have their own Internet connectivity but will have a connection to a GCS. Typically a GCS is an application on a user device (such as smartphone) that allow the user to fly their aircraft. For the Session ID registration the DIME MUST be provided with an `Generic Endorsement: GCS on UA` which implies there is some mechanism extracting and inserting information from the unmanned aircraft to the GCS. These methods MUST be secure but are out of scope for this document.

With this system it is also possible to have the GCS generate the DET based Session ID and insert it securely into the unmanned aircraft after registration is done. This is NOT RECOMMENDED as this invalidates the objective of the asymmetric cryptography in the underlying DET as the private key MAY get in the possession of another entity other than the unmanned aircraft. See {{det-gen-concern}} for more details.

## Child DIME

Handled by the Apex and RAA's. This is an endpoint that handles dynamic registration (or key roll-over) of lower-level DIMEs (RAAs to Apex and HDAs to RAAs) in the hierarchy.

~~~~
    +---------------+
    |   DIME: HDA   |
    +--o---o--------+
       |   ^
   (a) |   | (b)
       |   |
*******|***|*****************************
*      |   |    DIME: RAA               *
*      |   |                            *
*      v   |             +----------+   *
*   +--o---o--+          |          |   *
*   |   DPA   o--------->o          |   *
*   +----o----+   (d)    |          |   *
*        |               |          |   *
*        | (c)           | DIA/RDDS |   *
*        v               |          |   *
*   +----o--------+      |          |   *
*   | Registry/NS |      |          |   *
*   +-------------+      |          |   *
*                        +----------+   *
*                                       *
*****************************************

(a) Self-Endorsement: HDA,
    HDA Information or
    Generic Endorsement: old HDA, new HDA
(b) Success Code,
    Broadcast Endorsement: RAA on HDA
(c) HIP RR,
    CERT RRs
(d) HDA Information
~~~~
{:fig #dime-hda-example title="Example DIME:RAA with DIME:HDA Registration"}

It should be noted that this endpoint DOES NOT hand out dynamically RAA/HDA values to systems that hit the endpoint. This is done out-of-band through processes specified by local regulations and performed by cognizant authorities. The endpoint MUST NOT accept queries it is not previously informed of being expected via mechanisms not defined in this document.

It is OPTIONAL to implement this endpoint. This MAY be used to handle lower-level DIME key roll-over.

# Differentiated Access Process {#dap}

Per {{drip-arch}} all information classified as public is stored in a datastore protected using some form of differentiated access (i.e. AAA) to satisfy REG-2 from {{RFC9153}}.

Differentiated access, as a process, is a requirement for DIMEs as defined in {{RFC9153}} by the combination of PRIV-1, PRIV-3, PRIV-4, REG-2 and REG-4. {{drip-arch}} further elaborates on the concept by citing RDAP (from {{RFC7480}}, {{RFC9082}} and {{RFC9083}}) as a potential means of fulfilling this requirement.

Typically the cognizant authority is the primary querant of private information from a DIME if a Session ID is reported (the case of the owner of the private information is ignored for the moment). This capability MAY be delegated to other parties at the authorities discretion (be it to a single user or many), thus requiring a flexible system to delegate, determine and revoke querent access rights for information. XACML MAY be a good technology choice for this flexibility.

It is noted by the authors that as this system scales the problem becomes a, well known and tricky, key management problem. While recommendations for key management are useful they are not necessarily in scope for this document as best common practices around key management should already be mandated and enforced by the cognizant authorities in their existing systems. This document instead focuses on finding a balance for generic wide-spread interoperability between DIMEs with authorities and their existing systems in a Differentiated Access Process (DAP).

A system where cognizant authorities would require individual credentials to each HDA is not scalable, nor practical. Any change in policy would require the authority to interact with every single HDA (active or inactive) to grant or revoke access; this would be tedious and prone to mistakes. A single credential for a given authority is also strongly NOT RECOMMENDED due to the security concerns it would entail if it leaked.

A zero-trust model would be the most appropriate for a DAP; being highly flexible and robust. Most authorities however use "oracle" based systems with specific user credentials and the oracle knowing the access rights for a given user. This would require the DAP the have some standard mechanism to locate and query a given oracle for information on the querent to determine if access is granted.

DRIP has no intention to develop a new "art" of key management, instead hoping to leverage existing systems and be flexible enough to adapt as new ones become popular.

# DRIP in the Domain Name System {#dns}

Per {{drip-arch}} all information classified as public is stored in the DNS to satisfy REG-1 from {{RFC9153}}.

DNSSEC is strongly recommended (especially for RAA-level and higher zones). Frequency of updates, size of the zone, and DIME policy may impact its use.

## DET

The REQUIRED mechanism is to place any information into `ip6.arpa` sub-zones when using a DET. Since the DET is an IPv6 address it can be nibble-reversed and used in the zone, per standard conventions. The records in `ip6.arpa` MUST include: HIP, CERTs, and NAPTR. Other RRs to support additional DRIP functions MAY be included.

For DRIP, the prefix `2001:30/28` is slated for DETs being used in UAS as defined in {{RFC9374}} and is proposed, by this document, to have its authority delegated to ICAO. Other prefixes may be allocated by IANA in future for different use cases that do not fit cleanly into an existing prefix. Subdomain allocations under `arpa` may be a reasonable addition with new prefixes (such as for example `iot.arpa` if an HHIT prefix is allocated for IoT use), but is out of scope of this document.

The individual DETs may be potentially too numerous (e.g., 60 - 600M) and dynamic (e.g., new DETs every minute for some HDAs) to store in a signed, DNS zone. The HHIT Domain Authority SHOULD provide DNS service for its zone and provide the DET detail response.

## Serial Numbers & Other UAS ID Types

This document specifies the creation and delegation to ICAO of a the subdomain `uas` under `arpa`. To enable lookup of Serial Numbers a subdomains of `sn.id` is maintained under `uas.arpa`. Note that other subdomains under `uas.arpa` can be made to support other identifiers in UAS (such as UUIDv4s in their capacity as UTM Assigned IDs). The creation and use of other subdomains are out of scope for this document. DETs do not need a subdomain in `uas.arpa` (such as `det.id.uas.arpa`) as they fit within the predefined `ip6.arpa` as they are IPv6 addresses.

## Supported DNS Records

### HIP

Defined by {{RFC8005}}. Part of the requirment for the `ip6.arpa` zone in DRIP ({{dns}}). This is the primary public source of the HI of a DET.

### CERT

Defined by {{RFC4398}}. Part of the requirment for the `ip6.arpa` zone in DRIP ({{dns}}). Endorsements MUST be placed into DNS in the CERT RRs.

Endorsements are stored in Certificate Type OID Private (value 254) with a base OID of `1.3.6.1.4.1.6715.2` and further classified by the Endorsement/Certificate Type and then Entities involved.

> Editor Note: This OID is an initial allocation under the IANA Enterprise Number OID. It is expect that a general OID will be allocated.

| Endorsement Type        | OID Value |
| ----------------------- | --------- |
| Self-Endorsement        | 0         |
| Generic Endorsement     | 1         |
| Concise Endorsement     | 2         |
| Mutual Endorsement      | 3         |
| Link Endorsement        | 4         |
| Broadcast Endorsement   | 5         |

| Entity Type                  | OID Value |
| ---------------------------- | --------- |
| Unmanned Aircraft (UA)       | 0         |
| Ground Control Station (GCS) | 1         |
| Operator (OP)                | 2         |
| HDA                          | 3         |
| RAA                          | 4         |
| Root                         | 5         |

As an example the following OID: `1.3.6.1.4.1.6715.2.5.3.0` would decompose into: the base OID (`1.3.6.1.4.1.6715.2`), the Endorsement Type (`5`: Broadcast Endorsement) and then the parties involved (`3`: HDA, `0`: UA)

Certificate Type X.509 as per PKIX (value 1) MAY be used to store X.509 certificates as discussed in {{x509}}.

### NAPTR

Defined by {{RFC2915}}. Part of the requirment for the `ip6.arpa` zone in DRIP ({{dns}}). Used as a "pointer" to the private information registry for additional data about a DET. Data MUST be protected using mechanisms described in {{dap}} as required by local regulations.

# Endorsements

DRIP Endorsements are defined in a CDDL {{RFC8610}} structure that can be encoded to CBOR, JSON or have their keys removed and be sent as a binary blob. When the latter is used very specific forms are defined with naming conventions to know the data fields and their lengths for parsing.

{{specific-endorsements}} specifies various Endorsements and {{bin-examples}} their respective binary forms that are used in DRIP.

> Note: this section uses the term HHIT instead of DET as the Endorsements are designed to be generic and re-useable for other HHIT use-cases. Specific use-cases SHOULD add new keys for each section (if required) and define the valid keys and encoding forms for their use-case.

## Endorsement Structure

~~~~
endorsement = {
  identity: {
    (hit: bstr .size 16, ? hi: bstr) // (hhit: bstr .size 16, ? hi: bstr)
    * tstr: any
  },
  evidence: bstr,
  scope: {
    vnb: number,
    vna: number,
    * tstr: any
  }
  signature: {
    sig: bstr
    * tstr: any
  }
}
~~~~
{:fig #endorsement-json title="Endorsement CDDL"}

### Identity

The `identity` section is where the main identity information of the signer of the Endorsement is found. The identity can take many forms such as a handle to the identity (an HHIT), and can include more explicit data such as the public key (an HI). Other keys can be provided and MUST be defined in their specific Endorsement.

The length of the `hi` can be determined when using `hhit` or `hit` by decoding the provided IPv6 address. The prefix will inform of the ORCHID construction being used, which informs the locations of the OGA ID in the address. The OGA ID will then inform the user of the key algorithm selected which has the key length defined.

### Evidence

The `evidence` section contain a byte string of evidence. Specific content of evidence (such as subfields, length and ordering) is defined in specific Endorsement structures.

### Scope

The `scope` section is more formally "the scope of validity of the endorsement". The scope can come in various forms but MUST always have a "valid not before" (`vnb`) and "valid not after" (`vna`) timestamps.

Other forms of the scope could for example be a 4-dimensional volume definition. This could be in raw latitude, longitude, altitude pairs or may be a URI pointing to scope information. Additional scope fields are out of scope for this document and should be defined for specific Endorsement structures if they are desired.

### Signature

The `signature` section contain the signature data for the endorsement. The signature itself MUST be provided under the `sig` key. Other forms or data elements could also be present in the `signature` section if specified in a specific endorsement. Signatures MUST be generated using the preceding sections in their binary forms (i.e. as a bytestring with no keys).

## Abbreviations & File Naming Conventions

The names of endorsements can become quite long and tedious to write out. As such this section provides a guide to a somewhat standardized way they are written in text.

### In Text Abbreviation

In a long form the name of a particular endorsement can be written as follows:

- `Self-Endorsement: Unmanned Aircraft`
- `Generic Endorsement: Operator on Aircraft` or `Generic Endorsement: Operator, Aircraft`

When multiple entities are listed they can be separated by either `on` or by `,`. These long forms can be shortened:

- `SE(Unmanned Aircraft)` or `SE-ua`
- `GE(Operator, Unmanned Aircraft)` or `GE-op.ua`

Typical abbreviations for the entity can be used such as `Unmanned Aircraft` being shorthanded to `ua`.

### File Naming

For file naming of various endorsements a similar format to the short form is used:

- `se-{hash of entity}`
- `ge-{hash of entity x}_{hash of entity y}`

Some examples of file names:

- `se-79d8a404d48f2ef9.cert`
- `ge-120b8f25b198c1e1_79d8a404d48f2ef9.cert`

For a non-HHIT payload a pure hash (truncated if necessary) of the contents of a section is acceptable to be used instead. For DRIP the hash portion of the DET SHOULD be used.

# X.509 Certificates {#x509}

## Certificate Policy and Certificate Stores

X.509 certificates are optional for the DRIP entities covered in this document.  DRIP endpoint entities (EE) (i.e., UA, GCS, and Operators) may benefit from having X.509 certificates.  Most of these certificates will be for their DET and some will be for other UAS identities.  To provide for these certificates, some of the other entities covered in this document will also have certificates to create and manage the necessary PKI structure.

Any Certificate Authority (CA) supporting DRIP entities SHOULD adhere to the ICAO's International Aviation Trust Framework (IATF) Certificate Policy [ICAO-IATF-CP-draft].  The CA(s) supporting this CP MUST either be a part of the IATF Bridge PKI or part of the IATF CA Trust List.

EEs may use their X.509 certificates, rather than their rawPublicKey (i.e. HI) in authentication protocols (as not all may support rawPublicKey identities).  Some EE HI may not be 'worth' supporting the overhead of X.509.  Short lived DETs like those used for a single operation or even for a day's operations may not benefit from X.509. Creating then almost immediately revoking these certificates is a considerable burden on all parts of the system.  Even using a short not AfterDate will completely mitigate the burden of managing these certificates.  That said, many EEs will benefit to offset the effort. It may also be a regulator requirement to have these certificates.

Typically an HDA either does or does not issue a certificate for all its DETs. An RAA may specifically have some HDAs for DETs that do not want/need certificates and other HDAs for DETs that do need them. These types of HDAs could be managed by a single entity thus providing both environments for its customers.

It is recommended that DRIP X.509 certificates be stored as DNS TLSA Resource Records.  This not only generally improves certificate lookups, but also enables use of DANE {{RFC6698}} for the various servers in the UTM and particularly DIME environment and DANCE {{dane-clients}} for EEs (e.g. {{drip-secure-nrid-c2}}). All DRIP certificates MUST be available via RDAP. LDAP/OCSP access for other UTM and ICAO uses SHOULD also be provided.

## Certificate Management

(mostly TBD still)

PKIX standard X.509 issuance practices should be used. The certificate request SHOULD be included in the DET registration request. A successful DET registration then MUST include certificate creation, store, and return to the DET registrant.

Certificate revocation will parallel DET revocation. TLSA RR MUST be deleted from DNS and RDAP, LDAP, and OCSP return revoked responses. CRLs SHOULD be maintained per the CP.

Details of this are left out, as there are a number of approaches and further research and experience will be needed.

## Examples

TBD

## Alternative Certificate Encoding

(CBOR encoded certs here.  TBD)

# IANA Considerations

## IANA DRIP Registry

### DRIP Endorsement Registries

This document requests two new registries for Endorsement Type and Entity Type under the [DRIP registry group](https://www.iana.org/assignments/drip/drip.xhtml).

DRIP Endorsement Type:

: This 8-bit valued registry is for Endorsement Types to be used in OID's for CERT Resource Records. Future additions to this registry are to be made through Expert Review (Section 4.5 of {{RFC8126}}). The following values are defined:

| Endorsement Type        | Value     |
| ----------------------- | --------- |
| Self-Endorsement        | 0         |
| Generic Endorsement     | 1         |
| Concise Endorsement     | 2         |
| Mutual Endorsement      | 3         |
| Link Endorsement        | 4         |
| Broadcast Endorsement   | 5         |

DRIP Entity Type:

: This 8-bit valued registry is for Entity Types to be used in OID's for CERT Resource Records. Future additions to this registry are to be made through Expert Review (Section 4.5 of {{RFC8126}}). The following values are defined:

| Entity Type                  | Value     |
| ---------------------------- | --------- |
| Unmanned Aircraft (UA)       | 0         |
| Ground Control Station (GCS) | 1         |
| Operator (OP)                | 2         |
| HDA                          | 3         |
| RAA                          | 4         |
| Root                         | 5         |

### Aircraft Information Registry {#ua-info-registry}

This document requests a new registry for aircraft information fields under the [DRIP registry group](https://www.iana.org/assignments/drip/drip.xhtml).

Aircraft Information Fields:

: list of acceptable keys to be used in `UA Information` during a UA registration to a DIME. Future additions to this registry are to be made through First Come First Served (Section 4.4 of {{RFC8126}}). The following values are defined:

| Key Name | Type | Description |
|--------- | ---- | ----------- |
| length | float | length, in millimeters |
| width | float | width, in millimeters |
| height | float | height, in millimeters |
| constructionMaterial | tstr | materials, comma separated if multiple |
| color | tstr | colors, comma separated if multiple |
| serial | tstr | ANSI CTA 2063-A Serial Number |
| manufacturer | tstr | manufacturer name |
| make | tstr | aircraft make |
| model | tstr | aircraft model |
| dryWeight | float | weight of aircraft with no payloads |
| numRotors | int | Number of rotators |
| propLength | float | Length of props, in centimeters |
| numBatteries | int | |
| batteryCapacity | float | in milliampere hours |
| batteryWeight | float | in kilograms |
| batteryVoltage | float | in volts |
| batteryChemistry | tstr | |
| maxTakeOffWeight | float | in kilograms |
| maxPayloadWeight | float | in kilograms |
| maxFlightTime | float | in minutes |
| minOperatingTemp | float | in Celsius |
| maxOperatingTemp | float | in Celsius |
| ipRating | tstr | standard IP rating |
| engineType | tstr | |
| fuelType | tstr | |
| fuelCapacity | float | in liters |
| previousSerial | tstr | legacy serial number(s) |

# Security Considerations

## Additional DNS Resource Records

This document defines the standardization use of three primary DNS RRs to support DRIP interoperability and baseline use without compromising the privacy and security considerations of users: HIP {{hip}}, CERT {{cert}} and NAPTR {{naptr}}. Additional RRs MAY be added and SHOULD be audited for their impact on the privacy and security of users.

## Key Rollover & Federation

During key rollover the DIME MUST inform all children and parents of the change - using best standard practices of a key rollover. At time of writing this is signing over the new key with the previous key in a secure fashion and it being validated by others before changing any links in DNS.

A DET has a natural ability for a single DIME to hold different cryptographic identities under the same HID values. This is due to the lower 64-bits of the DET being a hash of the public key and the HID of the DET being generated. As such during key rollover, only the lower 64-bits would change and a check for a collision would be required.

This attribute of the DET to have different identities could also allow for a single DIME to be "federated" across them if they share the same HID value. This method of deployment has not been thoroughly studied at this time. An endpoint such as in {{child-dime}} is a possible place to have these functions.

## DET Generation {#det-gen-concern}

Under the FAA {{NPRM}}, it is expecting that IDs for UAS are assigned by the UTM and are generally one-time use. The methods for this however are unspecified leaving two options.

Option 1:

> The entity generates its own DET, discovering and using the RAA and HDA for the target DIME. The method for discovering a DIME's RAA and HDA is out of scope here. This allows for the device to generate an DET to send to the DIME to be accepted (thus generating the required Self-Endorsement) or denied.

Option 2:

> The entity sends to the DIME its HI for it to be hashed and result in the DET. The DIME would then either accept (returning the DET to the device) or deny this pairing.

Keypairs are expected to be generated on the device hardware it will be used on. Due to hardware limitations and connectivity it is acceptable, though not recommended, under DRIP to generate keypairs for the Aircraft on Operator devices and later securely inject them into the Aircraft. The methods to securely inject and store keypair information in a “secure element” of the Aircraft is out of scope of this document.

# Contributors

Thanks to Stuart Card (AX Enterprize, LLC) and Bob Moskowitz (HTT Consulting, LLC) for their early work on the DRIP registries concept. Their early contributions laid the foundations for the content and processes of this architecture and document. Bob Moskowitz is also instrumental in the PKIX work defined in this document with his parallel work in ICAO.

--- back

# DRIP Endorsements for UAS {#specific-endorsements}

~~~~
drip_endorsement = {
    identity: {
        hhit: bstr .size 16,
    },
    evidence: bstr,
    scope: {
        vnb: number,
        vna: number
    }
    signature: {
        sig: bstr
    }
}
~~~~
{:fig #specific-endorsements-fig title="CDDL Structure for DRIP UAS Endorsements"}

Unless otherwise noted all Endorsements in this section use the high level structure of {{#specific-endorsements-fig}} with the `evidence` field filled in as stated in their section.

## Self-Endorsement (SE-x) {#self-endorsement}

In a Self-Endorsement the `identity` is a DET and the `evidence` is the associate HI. The HI could be removed, resulting in an "empty" Endorsement, when obtaining the HI via other means (such as DNS) is guaranteed. This behavior is NOT RECOMMENDED as the data being signed would be very short.

## Generic Endorsement (GE-x.y) {#endorsement}

~~~~
generic_endorsement = {
    identity: {
        hhit: bstr .size 16,
        hi: bstr
    },
    evidence: bstr,
    scope: {
        vnb: number,
        vna: number
    }
    signature: {
        sig: bstr
    }
}
~~~~
{:fig #e-xy title="Generic Endorsement CDDL Structure"}

An endorsement used to sign over evidence that is being endorsed. The `hi` is added to avoid any external lookups for signature verification. Typically the `evidence` is filled with a byte string of a Self-Endorsement ({{self-endorsement}}) of another party in DRIP.

## Concise Endorsement (CE-x.y) {#concise-endorsement}

An endorsement signing over only the DET of Y (as `evidence`) and the DET of X (as `identity`). In constrained environments and when there is the guarantee of being able to lookup the DETs to obtain HIs this endorsement can be used.

## Mutual Endorsement (ME-x.y) {#mutual-endorsement}

An endorsement that perform a sign over an existing Generic Endorsement (as a byte string of `evidence`) where the signer is the second party of the embedded endorsement. The DET of party Y is used as the `identity`.

## Link Endorsement (LE-x.y) {#link-endorsement}

An endorsement that performs a sign over an existing Concise Endorsement (in byte string form for `evidence`) where the signer is the second party of the embedded endorsement. The DET of party Y is used as the `identity`.

## Broadcast Endorsement (BE-x.y) {#broadcast-endorsement}

This endorsement is required by DRIP Authentication Formats & Protocols for Broadcast RID ({{drip-auth}}) to satisfy {{RFC9153}} GEN-1 and GEN-3 and is sent in its binary form ({{bin-be}}).

The `evidence` is a concatenated byte string of the DET of Y and the HI of Y in DET/HI order. The `identity` is the DET of X.

## Evidence Endorsement (EE-x) {#evidence-endorsement}

The `evidence` in this structure is defined by its use-case. This is an abstract view of `UA Signed Evidence` structure found in {{drip-auth}} when used for various SAM Types.

# Binary Endorsements {#bin-examples}

## Self-Endorsement (SE-x) {#bin-se}

~~~~
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+---------------+---------------+---------------+---------------+
|                                                               |
|                              DRIP                             |
|                           Entity Tag                          |
|                                                               |
+---------------+---------------+---------------+---------------+
|                                                               |
|                                                               |
|                                                               |
|                          Host Identity                        |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
+---------------+---------------+---------------+---------------+
|                        Valid Not Before                       |
+---------------+---------------+---------------+---------------+
|                        Valid Not After                        |
+---------------+---------------+---------------+---------------+
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                            Signature                          |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
+---------------+---------------+---------------+---------------+

DRIP Entity Tag: 16-bytes
Host Identity: 32-bytes
Valid Not Before: 4-bytes
Valid Not After: 4-bytes
Signature: 64-bytes
~~~~
{:fig #bin-se-x title="Binary Self-Endorsement (Length: 120-bytes)"}

## Generic Endorsement (GE-x.y) {#bin-e}

~~~~
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+---------------+---------------+---------------+---------------+
|                                                               |
|                             DRIP                              |
|                        Entity Tag of X                        |
|                                                               |
+---------------+---------------+---------------+---------------+
|                                                               |
|                                                               |
|                                                               |
|                       Host Identity of X                      |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
+---------------+---------------+---------------+---------------+
|                                                               |
.                                                               .
.                             SE-y                              .
.                                                               .
|                                                               |
+---------------+---------------+---------------+---------------+
|                     Valid Not Before by X                     |
+---------------+---------------+---------------+---------------+
|                     Valid Not After by X                      |
+---------------+---------------+---------------+---------------+
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                         Signature by X                        |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
+---------------+---------------+---------------+---------------+

DRIP Entity Tag of X: 16-bytes
Host Identity: 32-bytes
SE-y: 120-bytes
Valid Not Before by X: 4-bytes
Valid Not After by X: 4-bytes
Signature by X: 64-bytes
~~~~
{:fig #bin-e-xy title="Binary Generic Endorsement (Length: 240-bytes)"}

## Concise Endorsement (CE-x.y) {#bin-ce}

~~~~
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+---------------+---------------+---------------+---------------+
|                                                               |
|                             DRIP                              |
|                        Entity Tag of X                        |
|                                                               |
+---------------+---------------+---------------+---------------+
|                                                               |
|                             DRIP                              |
|                        Entity Tag of Y                        |
|                                                               |
+---------------+---------------+---------------+---------------+
|                     Valid Not Before by X                     |
+---------------+---------------+---------------+---------------+
|                     Valid Not After by X                      |
+---------------+---------------+---------------+---------------+
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                         Signature by X                        |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
+---------------+---------------+---------------+---------------+

DRIP Entity Tag of X: 16-bytes
DRIP Entity Tag of Y: 16-bytes
Valid Not Before by X: 4-bytes
Valid Not After by X: 4-bytes
Signature by X: 64-bytes
~~~~
{:fig #bin-ce-xy title="Binary Concise Endorsement (Length: 104-bytes)"}

## Mutual Endorsement (ME-x.y) {#bin-me}

~~~~
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+---------------+---------------+---------------+---------------+
|                                                               |
|                             DRIP                              |
|                        Entity Tag of Y                        |
|                                                               |
+---------------+---------------+---------------+---------------+
|                                                               |
.                                                               .
.                            GE-x.y                             .
.                                                               .
|                                                               |
+---------------+---------------+---------------+---------------+
|                     Valid Not Before by Y                     |
+---------------+---------------+---------------+---------------+
|                     Valid Not After by Y                      |
+---------------+---------------+---------------+---------------+
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                         Signature by Y                        |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
+---------------+---------------+---------------+---------------+

DRIP Entity Tag of Y: 16-bytes
GE-x.y: 16-bytes
Valid Not Before by Y: 4-bytes
Valid Not After by Y: 4-bytes
Signature by Y: 64-bytes
~~~~
{:fig #bin-m-xy title="Binary Mutual Endorsement (Length: 328-bytes"}

## Link Endorsement (LE-x.y) {#bin-le}

~~~~
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+---------------+---------------+---------------+---------------+
|                                                               |
|                             DRIP                              |
|                        Entity Tag of Y                        |
|                                                               |
+---------------+---------------+---------------+---------------+
|                                                               |
.                                                               .
.                            CE-x.y                             .
.                                                               .
|                                                               |
+---------------+---------------+---------------+---------------+
|                     Valid Not Before by Y                     |
+---------------+---------------+---------------+---------------+
|                     Valid Not After by Y                      |
+---------------+---------------+---------------+---------------+
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                         Signature by Y                        |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
+---------------+---------------+---------------+---------------+

DRIP Entity Tag of Y: 16-bytes
CE-x.y: 16-bytes
Valid Not Before by Y: 4-bytes
Valid Not After by Y: 4-bytes
Signature by Y: 64-bytes
~~~~
{:fig #bin-le-xy title="DRIP Link Endorsement (Length: 192-bytes)"}

## Broadcast Endorsement (BE-x.y) {#bin-be}

~~~~
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+---------------+---------------+---------------+---------------+
|                                                               |
|                             DRIP                              |
|                        Entity Tag of X                        |
|                                                               |
+---------------+---------------+---------------+---------------+
|                                                               |
|                             DRIP                              |
|                        Entity Tag of Y                        |
|                                                               |
+---------------+---------------+---------------+---------------+
|                                                               |
|                                                               |
|                                                               |
|                       Host Identity of Y                      |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
+---------------+---------------+---------------+---------------+
|                     Valid Not Before by X                     |
+---------------+---------------+---------------+---------------+
|                     Valid Not After by X                      |
+---------------+---------------+---------------+---------------+
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                         Signature by X                        |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
|                                                               |
+---------------+---------------+---------------+---------------+

DRIP Entity Tag of X: 16-bytes
DRIP Entity Tag of Y: 16-bytes
Host Identity of Y: 32-bytes
Valid Not Before by X: 4-bytes
Valid Not After by X: 4-bytes
Signature by X: 64-bytes
~~~~
{:fig #bin-be-xy title="DRIP Broadcast Endorsement (Length: 136-bytes)"}

# DRIP Fully Qualified Domain Names {#drip-fqdn}

## DRIP Entity Tag {#det-fqdn}

The DET can be translated to the following FQDN form:

> {hash}.{oga_id}.{hda}.{raa}.{prefix}.{apex}.

When building a DET FQDN it MUST must be built using the exploded (all padding present) form of the IPv6 address.

Below is an example:

~~~~
Apex: .example.com.
DET: 2001:0030:0280:1405:c465:1542:a33f:dc26
ID: c4651542a33fdc26
OGA: 05
HID: 0028014
HDA: 0014
RAA: 000a
Prefix: 2001003
FQDN: c4651542a33fdc26.05.0014.000a.2001003.example.com.
~~~~

## UAS Serial Number {#sn-fqdn}

> {id}.{length}.{manufacturer-code}.{apex}.

~~~~
Apex: .sn.id.arpa.
Serial: MFR07TEST001
Manufacturer Code: MFR0
Length: 7
ID: TEST001
FQDN: test001.7.mfr0.sn.id.uas.arpa.
~~~~